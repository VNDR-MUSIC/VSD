
"use client";

import type { Metadata } from 'next';
import { useState } from 'react';
import { useForm, type SubmitHandler } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Code2, Bot, HelpCircle, ClipboardCopy, FileText, AlertTriangle } from 'lucide-react';

import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Textarea } from '@/components/ui/textarea';
import { Separator } from '@/components/ui/separator';
import { useToast } from '@/hooks/use-toast';
import {
  GenerateSmartContractInputSchema,
  type GenerateSmartContractInput,
  type GenerateSmartContractOutput,
  // generateVsdSmartContract, // Actual call is disabled
} from '@/ai/flows/generate-smart-contract-flow';
import { Form, FormControl, FormDescription, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';

// For Client Components, title can be set using document.title in useEffect or a library
// This page is a client component, so static metadata export is not applicable here.

export default function SmartContractGeneratorPage() {
  const [isLoading, setIsLoading] = useState(false);
  const [result, setResult] = useState<GenerateSmartContractOutput | null>(null);
  const [error, setError] = useState<string | null>(null);
  const { toast } = useToast();

  const form = useForm<GenerateSmartContractInput>({
    resolver: zodResolver(GenerateSmartContractInputSchema),
    defaultValues: {
      businessName: '',
      businessType: '',
      vsdIntegrationPurpose: '',
      blockchainPreference: '',
      coreFeatures: '',
      additionalRequirements: '',
    },
  });

  const onSubmit: SubmitHandler<GenerateSmartContractInput> = async (data) => {
    setIsLoading(true);
    setResult(null);
    setError(null);

    // AI call is disabled. Simulate a response.
    setTimeout(() => {
        setResult({
            solidityCode: "// AI Smart Contract Generation is currently disabled.\n// Your input details were received but not processed by the AI.",
            disclaimer: "This is a placeholder message. AI-driven smart contract generation is temporarily turned off."
        });
        setIsLoading(false);
        toast({
            title: 'AI Generation Disabled',
            description: 'Smart contract generation feature is currently inactive.',
        });
    }, 500);
  };
  
  const copyToClipboard = (text: string, type: string) => {
    navigator.clipboard.writeText(text).then(() => {
      toast({
        title: `${type} Copied!`,
        description: `${type} has been copied to your clipboard.`,
      });
    }).catch(err => {
      toast({
        title: 'Copy Failed',
        description: `Could not copy ${type}. Error: ${err.message}`,
        variant: 'destructive',
      });
    });
  };


  return (
    <div className="space-y-12 py-8">
      <header className="text-center">
        <div className="inline-flex items-center justify-center p-3 bg-primary/10 rounded-full mb-4">
         <FileText className="h-10 w-10 text-primary" />
        </div>
        <h1 className="font-headline text-4xl md:text-5xl font-bold mb-4 text-primary">AI Smart Contract Generator</h1>
        <p className="text-lg md:text-xl text-muted-foreground max-w-3xl mx-auto">
          Describe your business needs for VSD integration, and our AI will generate an example Solidity smart contract to get you started. (Feature currently disabled for live generation).
        </p>
         <Card className="mt-6 max-w-2xl mx-auto bg-destructive/10 border-destructive/30 text-destructive-foreground">
          <CardHeader className="flex flex-row items-center space-x-3 pb-2">
            <AlertTriangle className="h-6 w-6 text-destructive" />
            <CardTitle className="text-destructive text-lg">Important Disclaimer</CardTitle>
          </CardHeader>
          <CardContent className="text-sm text-destructive/90 text-left">
            The smart contract code generated by this tool (when active) is for **illustrative and educational purposes ONLY**.
            It is AI-generated, has **NOT** been audited, and is **NOT** production-ready.
            Always consult with experienced smart contract developers and conduct thorough security audits before deploying any smart contract. Use at your own risk.
          </CardContent>
        </Card>
      </header>

      <Separator />

      <Card className="max-w-3xl mx-auto shadow-xl">
        <CardHeader>
          <CardTitle className="font-headline text-2xl">Smart Contract Requirements</CardTitle>
          <CardDescription>Provide details about your business and how you intend to use VSD.</CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="businessName"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Business Name</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., Acme Web Services" {...field} />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="businessType"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Business Type</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., E-commerce, SaaS, Creator Platform" {...field} />
                    </FormControl>
                    <FormDescription>What kind of business do you operate?</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="vsdIntegrationPurpose"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Purpose of VSD Integration</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="e.g., Accept VSD for product sales, manage VSD subscriptions, distribute VSD rewards to users."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                     <FormDescription>How will VSD be used in your smart contract?</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="blockchainPreference"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Preferred Blockchain (Optional)</FormLabel>
                    <FormControl>
                      <Input placeholder="e.g., Ethereum, Polygon, BNB Chain (AI generates generic Solidity)" {...field} />
                    </FormControl>
                    <FormDescription>This provides context to the AI. Generic Solidity will be generated.</FormDescription>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="coreFeatures"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Core Smart Contract Features</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe the key functions your smart contract should perform. e.g., Process payments, handle escrow, split royalties, time-locked releases."
                        className="min-h-[120px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="additionalRequirements"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Additional Requirements or Notes (Optional)</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Any other specific details, constraints, or considerations for the AI."
                        className="min-h-[100px]"
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <Button type="submit" disabled={isLoading} className="w-full btn-hover-effect">
                {isLoading ? (
                  <>
                    <Bot className="mr-2 h-5 w-5 animate-spin" />
                    Processing...
                  </>
                ) : (
                  <>
                    <FileText className="mr-2 h-5 w-5" />
                    Submit Requirements (AI Gen Disabled)
                  </>
                )}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>

      {error && ( // Generic error display if needed, though direct AI errors are bypassed
         <Card className="max-w-3xl mx-auto border-destructive bg-destructive/10">
            <CardHeader className="flex flex-row items-center space-x-2">
                <AlertTriangle className="h-5 w-5 text-destructive" />
                <CardTitle className="text-destructive">Notice</CardTitle>
            </CardHeader>
            <CardContent>
                <p className="text-destructive/90">{error}</p>
            </CardContent>
        </Card>
      )}

      {result && (
        <Card className="max-w-3xl mx-auto shadow-lg">
          <CardHeader>
            <div className="flex justify-between items-center">
              <div>
                <CardTitle className="font-headline text-2xl flex items-center">
                  <Code2 className="mr-2 h-6 w-6 text-primary" /> Generation Status
                </CardTitle>
                <CardDescription>Below is the placeholder for the AI-generated smart contract.</CardDescription>
              </div>
              {result.solidityCode && (
                <Button variant="outline" size="sm" onClick={() => copyToClipboard(result.solidityCode, 'Status Message')}>
                  <ClipboardCopy className="mr-2 h-4 w-4" /> Copy Message
                </Button>
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="bg-muted p-4 rounded-md overflow-x-auto max-h-[600px]">
              <pre className="text-sm whitespace-pre-wrap">
                <code>{result.solidityCode}</code>
              </pre>
            </div>
            <div className="mt-4 p-4 border border-amber-500/50 bg-amber-500/10 rounded-md">
              <h4 className="font-semibold text-amber-600 flex items-center"><AlertTriangle className="mr-2 h-5 w-5" /> Disclaimer</h4>
              <p className="text-sm text-amber-700/90">{result.disclaimer}</p>
            </div>
          </CardContent>
        </Card>
      )}

      <Separator />
      
      <Card className="max-w-3xl mx-auto">
        <CardHeader>
          <CardTitle className="font-headline text-2xl flex items-center">
            <HelpCircle className="mr-2 h-6 w-6 text-primary" /> Need Help with Integration?
          </CardTitle>
        </CardHeader>
        <CardContent>
          <p className="mb-4 text-muted-foreground">
            Integrating smart contracts can be complex. If you need assistance with deploying, testing, or connecting this example contract to your business systems, you can consult with a professional blockchain developer or try our AI-powered support bot for general guidance.
          </p>
          <p className="mb-2 font-medium">AI Support Bot Script:</p>
          <p className="mb-2 text-sm text-muted-foreground">To use the bot, embed this script tag into your website's HTML where you want the chat widget to appear.</p>
          <div className="bg-muted p-3 rounded-md text-sm overflow-x-auto">
            <code>
              {`<script src="https://app.aminos.ai/js/chat_plugin.js" data-bot-id="51690"></script>`}
            </code>
          </div>
          <Button 
            variant="outline" 
            className="mt-4" 
            onClick={() => copyToClipboard('<script src="https://app.aminos.ai/js/chat_plugin.js" data-bot-id="51690"></script>', 'Support Bot Script')}
          >
            <ClipboardCopy className="mr-2 h-4 w-4" /> Copy Script Tag
          </Button>
        </CardContent>
      </Card>

    </div>
  );
}

    