'use server';
/**
 * @fileOverview AI flow to generate example Solidity smart contracts for VSD integration.
 *
 * - generateVsdSmartContract - Function to invoke the smart contract generation flow.
 * - GenerateSmartContractInputSchema - Input type for the flow.
 * - GenerateSmartContractOutputSchema - Output type for the flow.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit/zod';

export const GenerateSmartContractInputSchema = z.object({
  businessName: z.string().min(1, "Business name is required.").describe("The name of the business."),
  businessType: z.string().min(1, "Business type is required.").describe("Type of business (e.g., E-commerce, SaaS, Marketplace)."),
  vsdIntegrationPurpose: z.string().min(1, "Integration purpose is required.").describe("How VSD will be used (e.g., payments, subscriptions)."),
  blockchainPreference: z.string().optional().describe("Preferred blockchain network (e.g., Ethereum, Polygon). This is for context; the AI generates generic Solidity."),
  coreFeatures: z.string().min(1, "Core features are required.").describe("Key features desired in the smart contract."),
  additionalRequirements: z.string().optional().describe("Any other specific requirements or notes for the smart contract."),
});
export type GenerateSmartContractInput = z.infer<typeof GenerateSmartContractInputSchema>;

export const GenerateSmartContractOutputSchema = z.object({
  solidityCode: z.string().describe("The generated Solidity smart contract code."),
  disclaimer: z.string().describe("A disclaimer about the nature of the generated code."),
});
export type GenerateSmartContractOutput = z.infer<typeof GenerateSmartContractOutputSchema>;

const DISCLAIMER_TEXT = "IMPORTANT: This smart contract code is generated by an AI and is for illustrative and educational purposes ONLY. It has NOT been audited and is NOT production-ready. Always consult with experienced smart contract developers and conduct thorough security audits before deploying any smart contract to a live blockchain network. Use at your own risk. VSD Network is not liable for any issues arising from the use of this code.";

const generateContractFlowPrompt = ai.definePrompt({
  name: 'generateVsdSmartContractPrompt',
  input: { schema: GenerateSmartContractInputSchema },
  output: { schema: z.object({ generatedCode: z.string() }) },
  prompt: `You are an AI assistant that helps businesses generate *example* Solidity smart contracts for integrating the VSD stablecoin.
VSD is a stablecoin, typically pegged to USD.

Based on the business details and requirements provided below, generate a conceptual Solidity smart contract.
The contract should be well-commented and aim to follow common Solidity best practices.

**Business Details:**
- Name: {{{businessName}}}
- Type: {{{businessType}}}
- VSD Integration Purpose: {{{vsdIntegrationPurpose}}}
{{#if blockchainPreference}}- Preferred Blockchain (for context, generate generic Solidity): {{{blockchainPreference}}}{{/if}}

**Desired Smart Contract Features:**
{{{coreFeatures}}}

{{#if additionalRequirements}}
**Additional Requirements/Notes:**
{{{additionalRequirements}}}
{{/if}}

**Important Instructions for Generation:**
1.  Generate Solidity code (pragma solidity ^0.8.0; or newer compatible, like ^0.8.20).
2.  The contract should be a starting point. Include comments explaining different parts of the contract.
3.  Where specific addresses (like an VSD token contract address, owner address, or fee recipient) or critical parameters are needed, use clear placeholders (e.g., \`address public constant VSD_TOKEN_ADDRESS = address(0x...); // TODO: Replace with actual VSD token address\`).
4.  Include a basic constructor if applicable.
5.  If the integration involves payments, demonstrate how VSD (an ERC20 token) might be transferred or approved. Ensure to import a standard ERC20 interface if used (e.g., from OpenZeppelin, but provide the interface inline if an external import isn't directly usable in this context, or assume a globally available IERC20). For simplicity, you can define a minimal IERC20 interface within the contract file.
6.  **Crucially, add a prominent comment at the very top of the generated Solidity code stating:**
    \`// AI-GENERATED EXAMPLE CODE - NOT FOR PRODUCTION WITHOUT EXPERT REVIEW & AUDIT\`

Your output should be a JSON object with a single key "generatedCode" containing the Solidity code as a string.
Example output format:
{
  "generatedCode": "pragma solidity ^0.8.20;\\n\\n// AI-GENERATED EXAMPLE CODE - NOT FOR PRODUCTION WITHOUT EXPERT REVIEW & AUDIT\\n\\ninterface IERC20 { function transfer(address to, uint256 amount) external returns (bool); function approve(address spender, uint256 amount) external returns (bool); function transferFrom(address from, address to, uint256 amount) external returns (bool); function balanceOf(address account) external view returns (uint256); }\\n\\ncontract BusinessIntegrationVSD {\\n    // ... rest of the contract ...\\n}"
}
`,
  config: {
     temperature: 0.4, // Slightly lower temperature for more predictable contract structure
  },
});

const generateContractFlow = ai.defineFlow(
  {
    name: 'generateVsdSmartContractFlow',
    inputSchema: GenerateSmartContractInputSchema,
    outputSchema: GenerateSmartContractOutputSchema,
  },
  async (input) => {
    const { output } = await generateContractFlowPrompt(input);
    
    if (!output || !output.generatedCode) {
      console.error("AI failed to generate smart contract code. Raw output:", output);
      throw new Error("AI failed to generate smart contract code. The response was empty or malformed.");
    }

    return {
      solidityCode: output.generatedCode,
      disclaimer: DISCLAIMER_TEXT,
    };
  }
);

export async function generateVsdSmartContract(input: GenerateSmartContractInput): Promise<GenerateSmartContractOutput> {
  try {
    return await generateContractFlow(input);
  } catch (error) {
    console.error("Error in generateVsdSmartContract flow:", error);
    let errorMessage = "An unknown error occurred.";
    if (error instanceof Error) {
      errorMessage = error.message;
    } else if (typeof error === 'string') {
      errorMessage = error;
    }
    return {
        solidityCode: `// An error occurred while generating the smart contract.\n// Please check the server logs for more details or try again later.\n// Error: ${errorMessage}`,
        disclaimer: DISCLAIMER_TEXT + "\nAdditionally, an error occurred during generation. The code above might be incomplete or incorrect.",
    };
  }
}
