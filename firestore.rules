/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a combination of user-based ownership and role-based access control.
 *   User accounts and their associated data are primarily secured via ownership (a user can only access their own data).
 *   Administrative functions (e.g., viewing all transactions, managing tenants) are secured via admin roles.
 *   Certain data, like the top token holders leaderboard, is publicly readable.
 * @data-structure
 *   - /accounts/{accountId}: User account data, where {accountId} is the Firebase Auth UID.
 *   - /accounts/{accountId}/transactions/{transactionId}: Transaction history for a specific account.
 *   - /admins/{adminId}: List of admin UIDs.
 *   - /advertisements/{advertisementId}: Advertisement campaigns.
 *   - /advertiserApplications/{applicationId}: Applications to become an advertiser.
 *   - /api_logs/{logId}: API access logs.
 *   - /leaderboards/topHolders: Leaderboard of top token holders (publicly readable).
 *   - /tenants/{tenantId}: Tenant (partner project) data.
 *   - /transactions/{transactionId}: Global transaction log.
 * @key-security-decisions
 *   - User accounts are secured via UID matching. A user can only access their own account data.
 *   - Admin role is required to view global transaction logs, manage tenants, and approve advertiser applications.
 *   - The top token holders leaderboard is publicly readable.
 *   - Listing of all accounts is disallowed to protect user privacy.
 * @denormalization-for-authorization
 *   - No denormalization is explicitly used, but the security rules rely on the `request.auth.uid` to match the document ID for ownership checks.
 * @structural-segregation
 *   - Private user data is stored under `/accounts/{accountId}`, while public data (leaderboard) is at the top level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is authenticated.
     * @returns {boolean} True if the request is authenticated, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is an existing owner of the document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @returns {boolean} True if the UIDs match and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user has the 'admin' role.
     * @returns {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && 'admin' in get(/databases/$(database)/documents/admins/$(request.auth.uid)).data;
    }

    /**
     * @description Grants access to admins based on a document in the `/admins` collection.
     *   The document ID in `/admins` should match the user's UID.
     * @path /admins/{adminId}
     * @allow (get) User with UID 'admin123' can read their own admin document.
     * @allow (create) User with UID 'admin123' can create their admin document, if the UID matches the document ID.
     * @deny (update) Non-admin user cannot update an admin document.
     * @deny (delete) Non-admin user cannot delete an admin document.
     * @principle Enforces role-based access control for administrative privileges.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to user account data based on UID matching.
     *   A user can only access their own account data.
     * @path /accounts/{accountId}
     * @allow (get) User with UID 'user123' can read their own account data.
     * @allow (create) User with UID 'user123' can create their account data, if the UID matches the document ID.
     * @deny (update) Non-owner user cannot update an account document.
     * @deny (delete) Non-owner user cannot delete an account document.
     * @principle Enforces document ownership for reads and writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);

      /**
       * @description Grants access to user-specific transaction history.
       *   A user can only access their own transaction history.
       * @path /accounts/{accountId}/transactions/{transactionId}
       * @allow (get) User with UID 'user123' can read their own transaction 'tx123'.
       * @allow (create) User with UID 'user123' can create a transaction in their account.
       * @deny (update) Non-owner user cannot update a transaction document in the subcollection.
       * @deny (delete) Non-owner user cannot delete a transaction document in the subcollection.
       * @principle Enforces document ownership and authenticated access for transactions.
       */
      match /transactions/{transactionId} {
        allow get: if isOwner(accountId);
        allow list: if isOwner(accountId);
        allow create: if isOwner(accountId);
        allow update: if isExistingOwner(accountId);
        allow delete: if isExistingOwner(accountId);
      }
    }

    /**
     * @description Grants access to tenant data for administrative purposes.
     *   Only admins can read, create, update, or delete tenant data.
     * @path /tenants/{tenantId}
     * @allow (get) Admin user can read tenant 'tenant123'.
     * @allow (create) Admin user can create a new tenant document.
     * @deny (update) Non-admin user cannot update a tenant document.
     * @deny (delete) Non-admin user cannot delete a tenant document.
     * @principle Restricts tenant management to administrator accounts.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to the global transaction log for admins.
     *   Only admins can read and create transaction log entries.
     * @path /transactions/{transactionId}
     * @allow (get) Admin user can read transaction 'tx123'.
     * @allow (create) Admin user can create a new transaction log entry.
     * @deny (update) Non-admin user cannot update a transaction log entry.
     * @deny (delete) Non-admin user cannot delete a transaction log entry.
     * @principle Restricts global transaction log access to administrators.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to advertisement data based on advertiser ownership.
     *   An advertiser can only access their own advertisement campaigns.
     * @path /advertisements/{advertisementId}
     * @allow (get) Advertiser with UID 'adv123' can read their ad 'ad123'.
     * @allow (create) Advertiser with UID 'adv123' can create an ad.
     * @deny (update) Non-owner user cannot update an ad document.
     * @deny (delete) Non-owner user cannot delete an ad document.
     * @principle Enforces document ownership for advertisement campaigns.
     */
    match /advertisements/{advertisementId} {
      allow get: if isSignedIn() && resource.data.advertiserId == request.auth.uid;
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && resource.data.advertiserId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.advertiserId == request.auth.uid;
    }

    /**
     * @description Grants access to advertiser application data for admins.
     *   Only admins can read and update advertiser applications.
     * @path /advertiserApplications/{applicationId}
     * @allow (get) Admin user can read application 'app123'.
     * @deny (create) Non-admin user cannot create an application document directly. Applications are created by users.
     * @allow (update) Admin user can update the status of an application.
     * @deny (delete) Non-admin user cannot delete an application document.
     * @principle Restricts advertiser application management to administrators.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Grants access to API log data for admins.
     *   Only admins can read API logs for monitoring and debugging.
     * @path /api_logs/{logId}
     * @allow (get) Admin user can read log 'log123'.
     * @allow (create) Any authenticated user can create an API log (for internal system logging).
     * @deny (update) No one can update an API log entry.
     * @deny (delete) No one can delete an API log entry.
     * @principle Restricts API log access to administrators.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants public read access to the top token holders leaderboard.
     *   This data is intended for public consumption.
     * @path /leaderboards/topHolders
     * @allow (get) Any user can read the leaderboard.
     * @deny (create) No one should be able to create a new leaderboard document directly.
     * @deny (update) No one should be able to update the leaderboard document directly.
     * @deny (delete) No one should be able to delete the leaderboard document directly.
     * @principle Provides public read access to the leaderboard.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}