/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data,
 * while providing public read access to tenant information.  Transaction
 * data is accessible only to the associated account and global transaction
 * logs are not accessible at all.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores individual user account data. AccountId is the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection storing transactions for a specific account.
 * - /tenants/{tenantId}: Top-level collection for partner tenant information.
 *
 * Key Security Decisions:
 * - Users can only access their own account data and transactions.
 * - Listing tenants is publicly accessible.
 * - Global transaction logs are not accessible via the client.
 *
 * Denormalization for Authorization:
 *  - The `accountId` is used in the path of both the `/accounts` collection and its `/transactions` subcollection.  This avoids the need for any `get()` calls to validate ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the /accounts collection, ensuring users can only access their own data.
     * @path /accounts/{accountId}
     * @allow (create) - If the authenticated user's UID matches the accountId.
     * @allow (get, update, delete) - If the authenticated user's UID matches the accountId and the document exists.
     * @deny (create) - If the authenticated user's UID does not match the accountId.
     * @deny (get, update, delete) - If the authenticated user's UID does not match the accountId, or the document doesn't exist.
     * @principle Enforces document ownership for writes and reads.
     */
    match /accounts/{accountId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }
      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isExistingOwner(accountId);
      allow list: if false;

      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && resource.data.uid == request.resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Controls access to the /accounts/{accountId}/transactions subcollection, ensuring users can only access transactions associated with their account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create, get, update, delete) - If the authenticated user's UID matches the accountId.
     * @deny (create, get, update, delete) - If the authenticated user's UID does not match the accountId or the parent account document does not exist.
     * @principle Restricts access to a user's own transactions.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
        function isOwner(userId) {
          return request.auth != null && request.auth.uid == userId;
        }
        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }
        allow get: if isExistingOwner(accountId);
        allow list: if isOwner(accountId);

        allow create: if isOwner(accountId) && request.resource.data.accountId == accountId;
        allow update: if isExistingOwner(accountId) && request.resource.data.accountId == accountId;
        allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Controls access to the /tenants collection, allowing public read access but no writes.
     * @path /tenants/{tenantId}
     * @allow (get, list) - Anyone can read tenant information.
     * @deny (create, update, delete) - No one can create, update, or delete tenant information via the client.
     * @principle Provides public read access to tenant data while restricting write access.
     */
    match /tenants/{tenantId} {
      allow get: if true;
      allow list: if true;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to the /transactions collection, denying all client access.
     * @path /transactions/{transactionId}
     * @deny (get, list, create, update, delete) - No one can access this collection via the client.
     * @principle Restricts access to global transaction logs.
     */
    match /transactions/{transactionId} {
      allow get: if false;
      allow list: if false;

      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}