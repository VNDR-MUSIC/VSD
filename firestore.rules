/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing public readability with strict access control for user data and administrative functions.
 *
 * Data Structure:
 * - `/accounts/{accountId}`: User account data, secured by owner-only access.
 * - `/accounts/{accountId}/transactions/{transactionId}`: User-specific transaction history, secured by owner-only access.
 * - `/tenants/{tenantId}`, `/advertiserApplications/{appId}`, `/transactions/{transactionId}`: Admin-only collections for managing tenants, advertiser applications, and global transactions.
 * - `/advertisements/{adId}`: Publicly readable advertisements, managed by admins.
 * - `/leaderboards/topHolders/{docId}`: Publicly readable leaderboard data, updated by admins.
 *
 * Key Security Decisions:
 * - Users can only read and modify their own account data and transaction history.
 * - Administrative collections are strictly limited to admin users.
 * - Advertisements and leaderboards are publicly readable but only writable by admins.
 * - Listing of documents is generally allowed for user-owned subcollections but disallowed elsewhere unless explicitly public.
 *
 * Denormalization for Authorization:
 * - The rules rely on `request.auth.uid` matching the `accountId` in the path to authorize user-specific operations.
 *
 * Structural Segregation:
 * - Private user data is stored under `/accounts/{accountId}`, while public data like advertisements and leaderboards are stored in top-level collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // --- Helper Functions ---
    function isSignedIn() {
      return request.auth != null;
    }

    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    function isOwner(accountId) {
      return isSignedIn() && request.auth.uid == accountId;
    }

    function isExistingOwner(accountId) {
        return isOwner(accountId) && resource != null;
    }

    // --- ADMIN-ONLY COLLECTIONS ---

    /**
     * @description Allows admins to manage all transactions.
     * @path /transactions/{transactionId}
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Enforces admin-only access for sensitive transaction data.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage tenants.
     * @path /tenants/{tenantId}
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Enforces admin-only access for tenant management.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage advertiser applications.
     * @path /advertiserApplications/{appId}
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Enforces admin-only access for advertiser application reviews.
     */
    match /advertiserApplications/{appId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- USER ACCOUNTS AND SUBCOLLECTIONS ---

    /**
     * @description Allows users to manage their own account data.
     * @path /accounts/{accountId}
     * @allow (read, update) if isOwner(accountId)
     * @allow (create) if isSignedIn() && request.resource.data.uid == request.auth.uid;
     * @deny (read, update) if !isOwner(accountId)
     * @deny (create) if !isSignedIn() || request.resource.data.uid != request.auth.uid;
     * @principle Enforces document ownership and validates account creation.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Allows users to manage their own transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (read, create) if isOwner(accountId)
     * @deny (update, delete)
     * @principle Enforces document ownership for reads/creates, and prohibits updates/deletes.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if false;
      allow delete: if false;
    }

    // --- PUBLIC COLLECTIONS ---

    /**
     * @description Allows public read access to advertisements, but restricts writes to admins.
     * @path /advertisements/{adId}
     * @allow (read)
     * @allow (write) if isAdmin()
     * @deny (write) if !isAdmin()
     * @principle Allows public reads with admin-only writes.
     */
    match /advertisements/{adId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to the top holders leaderboard, but restricts writes to admins.
     * @path /leaderboards/topHolders/{docId}
     * @allow (read)
     * @allow (write) if isAdmin()
     * @deny (write) if !isAdmin()
     * @principle Allows public reads with admin-only writes.
     */
    match /leaderboards/topHolders/{docId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    // --- DEFAULT DENY RULE ---
    match /{document=**} {
      allow read: if false;
      allow write: if false;
    }
  }
}