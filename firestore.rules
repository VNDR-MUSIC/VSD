/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset prioritizes a strict owner-only access model for user-specific data,
 * combined with role-based access for administrative functions. Data validation is relaxed
 * in this prototyping phase to allow for flexible data shapes, focusing instead on
 * securing authorization and relationships.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs.
 * - /accounts/{accountId}: Stores user account data (keyed by UID).
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection of user transactions.
 * - /tenants/{tenantId}: Stores tenant/partner data.
 * - /transactions/{transactionId}: Stores a global log of transactions.
 * - /advertisements/{advertisementId}: Stores advertisement campaigns.
 * - /advertiserApplications/{applicationId}: Stores applications to become advertisers.
 * - /api_logs/{logId}: Stores API access logs.
 * - /leaderboards/topHolders: Stores a leaderboard of top token holders (public read).
 *
 * Key Security Decisions:
 * - User-owned data (accounts, transactions) is strictly controlled by the user's UID.
 * - Listing of all accounts is disallowed to prevent data scraping.
 * - The /leaderboards/topHolders document is publicly readable.
 * - All write operations require authentication.
 * - No complex data validation is performed in this prototype.
 *
 * Denormalization for Authorization:
 * To avoid costly `get()` calls, authorization decisions are based on data available directly
 * within the document being secured. For example, an `advertisement` document includes an
 * `advertiserId` field for easy owner validation.
 *
 * Structural Segregation:
 * Private user data (e.g., accounts, transactions) and public data (e.g., leaderboards) are
 * stored in separate collections with different security profiles.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to be created and read.
     * @path /admins/{adminId}
     * @allow (create, get, update, delete, list) if isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces write access only to signed-in users.
     */
    match /admins/{adminId} {
      allow read, create, update, delete: if isSignedIn();
      allow list: if false;
    }

    /**
     * @description Allows a user to read and write their own account data.
     * @path /accounts/{accountId}
     * @allow (create) if isSignedIn() && request.auth.uid == accountId
     * @allow (get, update, delete) if isOwner(accountId)
     * @deny (create) if request.auth.uid != accountId
     * @deny (list) Always deny listing all accounts
     * @principle Enforces document ownership for writes, restricts listing to prevent data scraping.
     */
    match /accounts/{accountId} {
      allow get, update, delete: if isExistingOwner(accountId);
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow list: if false;
    }

    /**
     * @description Allows a user to manage their own transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) if isOwner(accountId)
     * @allow (get, update, delete, list) if isOwner(accountId)
     * @deny (create) if !isOwner(accountId)
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list, create, update, delete: if isOwner(accountId);
    }

    /**
     * @description Allows CRUD operations for tenants.
     * @path /tenants/{tenantId}
     * @allow (create, get, update, delete, list) if isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces write access only to signed-in users.
     */
    match /tenants/{tenantId} {
      allow read, create, update, delete, list: if isSignedIn();
    }

    /**
     * @description Allows read operations for transactions if signed in
     * @path /transactions/{transactionId}
     * @allow (get, list) if isSignedIn()
     * @deny (create, update, delete) Always deny general create/update/delete
     * @principle Restricts transaction data to read-only for authenticated users
     */
    match /transactions/{transactionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if false;
    }

     /**
      * @description Allows public read, owner-only write access for Advertisements
      * @path /advertisements/{advertisementId}
      * @allow (get, list) if true
      * @allow (create) if isSignedIn() && request.resource.data.advertiserId == request.auth.uid
      * @allow (update, delete) if isExistingOwner(resource.data.advertiserId)
      * @deny (create) if request.resource.data.advertiserId != request.auth.uid
      * @principle Allows public data, with restricted writes based on ownership.
      */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Allows CRUD operations for advertiser applications
     * @path /advertiserApplications/{applicationId}
     * @allow (create) if isSignedIn() && request.resource.data.userId == request.auth.uid
     * @allow (get, list) if isSignedIn()
     * @allow (update, delete) if false
     * @deny (create) if request.resource.data.userId != request.auth.uid
     * @principle Enforces write access only to signed-in users, listable only to signed-in users.
     */
    match /advertiserApplications/{applicationId} {
      allow get, list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if false;
    }

    /**
     * @description Allows CRUD operations for api logs
     * @path /api_logs/{logId}
     * @allow (create, get, update, delete, list) if isSignedIn()
     * @deny (create, update, delete) if !isSignedIn()
     * @principle Enforces write access only to signed-in users.
     */
    match /api_logs/{logId} {
      allow read, create, update, delete, list: if isSignedIn();
    }

    /**
     * @description Allows public read access to the topHolders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (get, list) if true
     * @deny (create, update, delete) Always deny general create/update/delete
     * @principle Public read access for leaderboard data
     */
    match /leaderboards/topHolders {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Helper function to determine if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Helper function to determine if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Helper function to determine if the request is made by the existing owner of the document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }
  }
}