/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for public data with strict ownership and role-based access control for sensitive information.
 *
 * Data Structure:
 * - /admins/{adminId}:  List of admin users.
 * - /accounts/{accountId}: User account data, keyed by Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Transaction history for a specific user.
 * - /tenants/{tenantId}: Partner tenant information.
 * - /transactions/{transactionId}: Global transaction log (admin-only).
 * - /advertisements/{advertisementsId}: Advertisement campaigns.
 * - /advertiserApplications/{applicationId}: Applications to become an advertiser.
 * - /api_logs/{logId}: API access logs (admin-only).
 * - /leaderboards/topHolders: Public leaderboard data.
 *
 * Key Security Decisions:
 * - User accounts and their transaction history are strictly owned by the user.
 * - The global transaction log and API logs are restricted to admin access.
 * - Leaderboard data is publicly readable.
 * - Data validation is relaxed in this prototyping phase to allow for schema iteration.
 *
 * Denormalization for Authorization:
 *  - For now, denormalization is not used in this ruleset. In a production environment, roles and ownership are denormalized into the documents to minimize reads.
 *
 * Structural Segregation:
 *  - The use of separate collections for public (leaderboards) and private (user accounts) data allows for efficient and secure access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage the list of admins.
     * @path /admins/{adminId}
     * @allow (create) User with 'admin' role can create an admin record.
     * @deny (create) User without 'admin' role cannot create an admin record.
     * @principle Enforces role-based access control.
     */
    match /admins/{adminId} {
      allow get: if false;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to manage their own account data.
     * @path /accounts/{accountId}
     * @allow (create) Authenticated user can create their own account.
     * @deny (create) Authenticated user cannot create an account for another user.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Allows a user to manage their own transaction history.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) Authenticated user can create a transaction under their account.
     * @deny (create) Authenticated user cannot create a transaction under another user's account.
     * @principle Enforces document ownership for writes within a subcollection.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows admins to manage tenants.
     * @path /tenants/{tenantId}
     * @allow (create) User with 'admin' role can create a tenant.
     * @deny (create) User without 'admin' role cannot create a tenant.
     * @principle Enforces role-based access control.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage all transactions.
     * @path /transactions/{transactionId}
     * @allow (create) User with 'admin' role can create a transaction.
     * @deny (create) User without 'admin' role cannot create a transaction.
     * @principle Enforces role-based access control.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows admins to manage advertisements.  Advertisers can manage their own ads.
     * @path /advertisements/{advertisementId}
     * @allow (create) Advertiser can create an ad with their ID as the advertiserId.
     * @deny (create) User cannot create an ad for another advertiser.
     * @principle Enforces document ownership for writes.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

   /**
     * @description Allows anyone to create an advertiser application.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) Any signed-in user can submit an application.
     * @deny (create) User cannot create an application for another user.
     * @principle Allows self-creation of applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Allows admins to read and write API logs.
     * @path /api_logs/{logId}
     * @allow (get) User with 'admin' role can read API logs.
     * @deny (get) User without 'admin' role cannot read API logs.
     * @principle Enforces role-based access control.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

   /**
    * @description Allows anyone to read leaderboard data, but restricts writes.
    * @path /leaderboards/topHolders
    * @allow (get) Anyone can read the leaderboard.
    * @deny (create) Only admin users can modify the leaderboard.
    * @principle Allows public read access with owner-only writes (admin role).
    */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isSignedIn() && isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return request.auth != null && ( exists(/databases/$(database)/documents/admins/$(request.auth.uid)));
    }
  }
}