
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to check if the user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if the user is the owner of the account
    function isAccountOwner(accountId) {
      return request.auth.uid == accountId;
    }

    // ACCOUNTS: Users can only read their own account. Writes are disallowed for all clients.
    // Balances must only be mutated by trusted Cloud Functions.
    match /accounts/{accountId} {
      allow read: if isAuthenticated() && isAccountOwner(accountId);
      allow write: if false; // NO-CLI-WRITES
    }

    // TRANSACTIONS: Users can read transactions where they are the sender or receiver. 
    // Writes are disallowed for all clients.
    match /transactions/{transactionId} {
      allow read: if isAuthenticated() && (resource.data.from == request.auth.uid || resource.data.to == request.auth.uid);
      allow write: if false; // NO-CLI-WRITES
    }

    // TENANTS: Publicly readable for client-side configuration, but only writable from backend.
    match /tenants/{tenantId} {
      allow read: if true;
      allow write: if false;
    }

    // LEDGERS & AUDIT LOGS: These are for internal auditing and should not be client-accessible.
    match /ledgers/{ledgerId} {
      allow read, write: if false;
    }
    match /audit_logs/{logId} {
      allow read, write: if false;
    }

    // API Keys, Idempotency, Promotions are backend-only collections.
    match /api_keys/{keyId} {
        allow read, write: if false;
    }
     match /idempotency/{keyId} {
        allow read, write: if false;
    }
     match /promotions/{promoId} {
        allow read, write: if false;
    }
  }
}

    