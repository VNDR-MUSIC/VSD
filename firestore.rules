/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @Core Philosophy
 * This ruleset employs a strict user-ownership model for accounts and their associated transactions.
 * Tenant and global transaction data is secured for admin-level access.
 *
 * @Data Structure
 * - /accounts/{accountId}: Stores individual user account data, keyed by Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: A subcollection storing all transactions for a specific user account.
 * - /tenants/{tenantId}: Top-level collection for all partner tenants integrated with the VSD Network.
 * - /transactions/{transactionId}: A global log of all transactions for administrative overview.
 *
 * @Key Security Decisions
 * - User accounts are secured using an ownership model, where only the authenticated user can read and write their own account data.
 * - Listing all accounts is explicitly denied to prevent unauthorized data access.
 * - Transactions are secured both at the user account level (owner-only) and globally (admin-only).
 *
 * @Denormalization for Authorization
 *  N/A - Current rules leverage the path-based ownership model.  Future iterations could denormalize role or status information for faster checks.
 *
 * @Structural Segregation
 *  N/A - Data is separated into logical collections based on purpose and access control requirements.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures individual user account data.
     * @path /accounts/{accountId}
     * @allow (get, update, delete) if the user is the owner of the account.
     * @allow (create) if the authenticated user's UID matches the accountId.
     * @deny (list) Always deny listing all accounts.
     * @deny (create, update, delete) if the user is not the owner of the account.
     * @principle Enforces document ownership for all operations.
     */
    match /accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return isSignedIn() && request.auth.uid == accountId;
      }

      function isExistingOwner(accountId) {
          return isSignedIn() && request.auth.uid == accountId && resource.data != null;
      }

      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures the transactions subcollection for a specific user account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete) if the user is the owner of the parent account.
     * @deny (create, update, delete) if the user is not the owner of the parent account.
     * @principle Enforces document ownership and prevents unauthorized modifications.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return isSignedIn() && request.auth.uid == accountId;
      }

      function isParentOwner(accountId) {
        return isSignedIn() && request.auth.uid == accountId;
      }

      allow get: if isParentOwner(accountId);
      allow list: if isParentOwner(accountId);
      allow create: if isParentOwner(accountId);
      allow update: if isParentOwner(accountId);
      allow delete: if isParentOwner(accountId);
    }

    /**
     * @description Secures tenant data.  Placeholder rules, as full admin security is not yet implemented.
     * @path /tenants/{tenantId}
     * @allow (get, list) if true.  Assumes tenants may be semi-public for discovery.
     * @allow (create, update, delete) if false. // TODO: Add admin role check once implemented.
     * @principle Placeholder for admin-only access to tenant data.
     */
    match /tenants/{tenantId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add admin role check once implemented.
    }

      /**
       * @description Secures the global transactions log. Placeholder rules, as full admin security is not yet implemented.
       * @path /transactions/{transactionId}
       * @allow get, list: if false. // TODO: Add admin role check once implemented.
       * @allow create, update, delete: if false. // TODO: Add admin role check once implemented.
       * @principle Placeholder for admin-only access to the global transactions log.
       */
    match /transactions/{transactionId} {
        allow get, list: if false; // TODO: Add admin role check once implemented.
        allow create, update, delete: if false; // TODO: Add admin role check once implemented.
    }
  }
}