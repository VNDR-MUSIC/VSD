/**
 * @fileoverview Firestore Security Rules for the VSD Network application.
 *
 * Core Philosophy:
 * This ruleset enforces a user-ownership model for user accounts, transactions, and API logs,
 * allowing only the authenticated user to read and write their own data. It also incorporates
 * role-based access control for administrative functions, leveraging custom claims. Public
 * read access is granted to the leaderboard data, while advertisements are publicly readable but owner writeable.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account information, keyed by the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection for user-specific transactions.
 * - /transactions/{transactionId}: Global transaction log (admin-only write).
 * - /api_logs/{logId}: API access logs, readable and writable only by the user.
 * - /advertisements/{advertisementId}: Advertisements created by advertisers.
 * - /advertiserApplications/{applicationId}: Applications to become an advertiser.
 * - /admins/{adminId}: List of admin UIDs.
 * - /leaderboards/topHolders: Public leaderboard data.
 *
 * Key Security Decisions:
 * - User accounts and associated data are strictly controlled by the authenticated user.
 * - Global transactions and advertiser applications are restricted to admin access.
 * - Leaderboard data is publicly readable.
 * - Data validation is minimized for rapid prototyping, focusing on ownership and relational integrity.
 *
 * Denormalization for Authorization:
 * - Transactions and API logs store the userId directly on the document to avoid costly `get()` calls.
 * - The 'advertisements' document has an 'advertiserId' to denote the document owner.
 *
 * Structural Segregation:
 * - User-specific transactions are stored in a subcollection under the user's account, separate from the global transaction log.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to a user's own account data.
     * @path /accounts/{accountId}
     * @allow (get, list, update, delete) if the user is the account owner.
     * @allow (create) if the user's UID matches the account ID.
     * @deny (create) if the user's UID does not match the account ID.
     * @deny (update, delete) if the user is not the account owner or the account does not exist.
     * @principle Enforces document ownership for user accounts.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isSignedIn() && isExistingOwner(accountId);
      allow delete: if isSignedIn() && isExistingOwner(accountId);
    }

    /**
     * @description Allows access to a user's own transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list, update, delete) if the user is the account owner.
     * @allow (create) if the user is the account owner.
     * @deny (create) if the user is not the account owner.
     * @deny (update, delete) if the user is not the account owner or the account does not exist.
     * @principle Enforces document ownership for user transactions.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isSignedIn() && isExistingOwner(accountId);
      allow delete: if isSignedIn() && isExistingOwner(accountId);
    }

    /**
     * @description Allows access to tenants data.
     * @path /tenants/{tenantId}
     */
    match /tenants/{tenantId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to a global transaction log.
     * @path /transactions/{transactionId}
     */
    match /transactions/{transactionId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to advertisements, but restricts write access to the advertiser.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) if true (public read).
     * @allow (create) if the authenticated user's UID matches the advertisement's advertiserId.
     * @allow (update, delete) if the authenticated user is the advertiser.
     * @deny (create) if the advertisement's advertiserId does not match the authenticated user's UID.
     * @deny (update, delete) if the advertisement does not exist or the authenticated user is not the advertiser.
     * @principle Public read, owner-only writes for advertisements.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Allows write access to advertiser applications.
     * @path /advertiserApplications/{applicationId}
     */
    match /advertiserApplications/{applicationId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to API logs, restricted to the user who generated the log.
     * @path /api_logs/{logId}
     */
    match /api_logs/{logId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows public read access to the leaderboard data.
     * @path /leaderboards/topHolders
     */
    match /leaderboards/topHolders {
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Allows access to admins data.
     * @path /admins/{adminId}
     */
    match /admins/{adminId} {
      allow get, list: if false;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }


  }

  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }
}