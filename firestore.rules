/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data and
 * restricts access to transaction logs. Advertisements are publicly readable,
 * but create/update/delete operations are not secured due to a missing ownership field.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for each account.
 * - /tenants/{tenantId}: Stores tenant information.
 * - /transactions/{transactionId}: A global transaction log.
 * - /advertisements/{advertisementId}: Stores advertisement data.
 *
 * Key Security Decisions:
 * - Users can only access their own account data and transaction history.
 * - The global transaction log is not secured in this prototype and may need to be restricted to admins.
 * - Advertisements are publicly readable. Writes are currently open due to missing authoring information, but this must be addressed.
 *
 * Denormalization for Authorization:
 *  - The `accountId` is used as the document ID in `/accounts/{accountId}` to simplify ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user account data, allowing only the owner to read and write.
     * @path /accounts/{accountId}
     * @allow (get, list) if request.auth.uid == accountId; (Authenticated user can read their own account data)
     * @allow (create) if request.auth.uid == accountId; (Authenticated user can create their own account)
     * @deny (create) if request.auth.uid != accountId; (Denies creation of an account with an ID different from the user's UID)
     * @allow (update, delete) if isExistingOwner(accountId); (Authenticated user can update or delete their own existing account)
     * @deny (update, delete) if !isSignedIn() || request.auth.uid != accountId || resource == null; (Denies updates or deletes by non-authenticated users or different users, or if the account doesn't exist)
     * @principle Enforces document ownership for all operations.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures transaction history for each account, allowing only the owner to read and write.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list) if isSignedIn() && isOwner(accountId); (Authenticated user can read their own transaction history)
     * @allow (create) if isSignedIn() && isOwner(accountId); (Authenticated user can create transactions for their own account)
     * @deny (create) if request.auth.uid != accountId; (Denies creation of transactions for other accounts)
     * @allow (update, delete) if isExistingOwner(accountId); (Authenticated user can update or delete transactions for their own account)
     * @deny (update, delete) if !isSignedIn() || request.auth.uid != accountId || resource == null; (Denies updates or deletes by non-authenticated users or different users, or if the transaction doesn't exist)
     * @principle Restricts access to a user's own data tree, enforcing ownership.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures tenant information, allowing only authenticated users to read and write. This is a placeholder and should be secured further for production.
     * @path /tenants/{tenantId}
     * @allow get, list: if isSignedIn(); (Authenticated user can read tenant data)
     * @allow create, update, delete: if false; // TODO: Secure tenant management based on roles or ownership.
     * @principle Placeholder for tenant security; requires further refinement.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the global transaction log for admin-only access. This is a placeholder and must be properly implemented.
     * @path /transactions/{transactionId}
     * @allow get, list: if false; // TODO: Restrict to admin roles.
     * @allow create, update, delete: if false; // TODO: Restrict to admin roles.
     * @principle Restricts access to sensitive data; requires admin role implementation.
     */
    match /transactions/{transactionId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

       /**
        * @description Allows public read access to advertisements with owner-only writes.
        * @path /advertisements/{advertisementId}
        * @allow get, list: if true; (Anyone can read advertisement data)
        * @allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
        * @principle Allows public reads and restricts writes to owners.
        */
    match /advertisements/{advertisementId} {
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}