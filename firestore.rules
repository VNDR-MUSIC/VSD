/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for certain public resources with strict ownership and role-based access control for sensitive data.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs. Admins have elevated privileges.
 * - /accounts/{accountId}: Stores user account data, keyed by UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection of user transactions.
 * - /tenants/{tenantId}: Stores tenant (partner) information.
 * - /transactions/{transactionId}: A global log of all transactions (admin-only).
 * - /advertisements/{advertisementId}: Stores advertisement campaigns.
 * - /advertiserApplications/{applicationId}: Stores applications to become an advertiser.
 * - /api_logs/{logId}: Logs API access for monitoring and debugging.
 * - /leaderboards/topHolders: Stores a single document containing the top VSD token holders; intended for public read access.
 *
 * Key Security Decisions:
 * - User-owned data (accounts, transactions, advertisements) is protected by the `isOwner()` function, ensuring only the authenticated user can modify their own data.
 * - Admin-level access is controlled via the `isAdmin()` function, which checks for membership in the `/admins` collection.
 * - The `/leaderboards/topHolders` document is publicly readable to display top token holders.
 * - The global `/transactions` collection and `/api_logs` are secured for admin-only access.
 * - Listing of the `/admins` collection is explicitly denied.
 *
 * Denormalization for Authorization:
 * - The `advertisements` collection requires the `advertiserId` field on each document to enforce ownership.
 *
 * Structural Segregation:
 * - Advertiser-owned ads are stored in a top-level `/advertisements` collection instead of a user subcollection, but are secured via the `advertiserId` field.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in and the UID matches; otherwise, false.
     * @example isOwner('someUserId') returns true if request.auth.uid == 'someUserId'.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is an existing owner of a document.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is signed in, the UID matches, and the resource exists; otherwise, false.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin by verifying their UID exists in the /admins collection.
     * @return {boolean} True if the user is an admin; otherwise, false.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    match /admins/{adminId} {
      /**
       * @description Allows admins to be created by other admins, and ensures that the adminId matches the authenticated user's UID.
       * @path /admins/{adminId}
       * @allow (create) If the requesting user is an admin and the adminId matches the authenticated user's UID.
       * @deny (create) If the requesting user is not an admin or the adminId does not match the authenticated user's UID.
       * @principle Enforces role-based access control and validates relational integrity.
       */
      allow create: if isAdmin() && request.resource.data.uid == adminId;
      /**
       * @description Allows admins to get their own profile.
       * @path /admins/{adminId}
       * @allow (get) If the requesting user is an admin.
       * @deny (get) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow get: if isAdmin();
      /**
       * @description Allows admins to update their own profile.
       * @path /admins/{adminId}
       * @allow (update) If the requesting user is an admin.
       * @deny (update) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow update: if isAdmin();
      /**
       * @description Allows admins to delete their own profile.
       * @path /admins/{adminId}
       * @allow (delete) If the requesting user is an admin.
       * @deny (delete) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow delete: if isAdmin();

      /**
       * @description Listing admins is not allowed.
       * @path /admins/{adminId}
       * @deny (list) Listing is always denied.
       * @principle Prevents unauthorized enumeration of admins.
       */
      allow list: if false;
    }

    match /accounts/{accountId} {
      /**
       * @description Allows a user to create their own account if the accountId matches their UID.
       * @path /accounts/{accountId}
       * @allow (create) If the accountId matches the authenticated user's UID.
       * @deny (create) If the accountId does not match the authenticated user's UID.
       * @principle Enforces document ownership and validates relational integrity.
       */
      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      /**
       * @description Allows a user to get their own account.
       * @path /accounts/{accountId}
       * @allow (get) If the accountId matches the authenticated user's UID.
       * @deny (get) If the accountId does not match the authenticated user's UID.
       * @principle Enforces document ownership.
       */
      allow get: if isOwner(accountId);
      /**
       * @description Allows a user to update their own account if the accountId matches their UID.
       * @path /accounts/{accountId}
       * @allow (update) If the accountId matches the authenticated user's UID.
       * @deny (update) If the accountId does not match the authenticated user's UID.
       * @principle Enforces document ownership.
       */
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      /**
       * @description Allows a user to delete their own account if the accountId matches their UID.
       * @path /accounts/{accountId}
       * @allow (delete) If the accountId matches the authenticated user's UID.
       * @deny (delete) If the accountId does not match the authenticated user's UID.
       * @principle Enforces document ownership.
       */
      allow delete: if isExistingOwner(accountId);
      /**
       * @description Allows a user to list their own account.
       * @path /accounts/{accountId}
       * @allow (list) If the accountId matches the authenticated user's UID.
       * @deny (list) If the accountId does not match the authenticated user's UID.
       * @principle Enforces document ownership.
       */
      allow list: if isOwner(accountId);

      match /transactions/{transactionId} {
        /**
         * @description Allows a user to create a transaction for their own account.
         * @path /accounts/{accountId}/transactions/{transactionId}
         * @allow (create) If the accountId matches the authenticated user's UID.
         * @deny (create) If the accountId does not match the authenticated user's UID.
         * @principle Enforces document ownership.
         */
        allow create: if isOwner(accountId);
        /**
         * @description Allows a user to get a transaction for their own account.
         * @path /accounts/{accountId}/transactions/{transactionId}
         * @allow (get) If the accountId matches the authenticated user's UID.
         * @deny (get) If the accountId does not match the authenticated user's UID.
         * @principle Enforces document ownership.
         */
        allow get: if isOwner(accountId);
        /**
         * @description Allows a user to update a transaction for their own account.
         * @path /accounts/{accountId}/transactions/{transactionId}
         * @allow (update) If the accountId matches the authenticated user's UID.
         * @deny (update) If the accountId does not match the authenticated user's UID.
         * @principle Enforces document ownership.
         */
        allow update: if isExistingOwner(accountId);
        /**
         * @description Allows a user to delete a transaction for their own account.
         * @path /accounts/{accountId}/transactions/{transactionId}
         * @allow (delete) If the accountId matches the authenticated user's UID.
         * @deny (delete) If the accountId does not match the authenticated user's UID.
         * @principle Enforces document ownership.
         */
        allow delete: if isExistingOwner(accountId);
        /**
         * @description Allows a user to list transactions for their own account.
         * @path /accounts/{accountId}/transactions/{transactionId}
         * @allow (list) If the accountId matches the authenticated user's UID.
         * @deny (list) If the accountId does not match the authenticated user's UID.
         * @principle Enforces document ownership.
         */
        allow list: if isOwner(accountId);
      }
    }

    match /tenants/{tenantId} {
      /**
       * @description Allows admins to create tenants.
       * @path /tenants/{tenantId}
       * @allow (create) If the requesting user is an admin.
       * @deny (create) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow create: if isAdmin();
      /**
       * @description Allows admins to get tenant information.
       * @path /tenants/{tenantId}
       * @allow (get) If the requesting user is an admin.
       * @deny (get) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow get: if isAdmin();
      /**
       * @description Allows admins to update tenant information.
       * @path /tenants/{tenantId}
       * @allow (update) If the requesting user is an admin.
       * @deny (update) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow update: if isAdmin();
      /**
       * @description Allows admins to delete tenants.
       * @path /tenants/{tenantId}
       * @allow (delete) If the requesting user is an admin.
       * @deny (delete) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow delete: if isAdmin();
      /**
       * @description Allows admins to list tenants.
       * @path /tenants/{tenantId}
       * @allow (list) If the requesting user is an admin.
       * @deny (list) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow list: if isAdmin();
    }

    match /transactions/{transactionId} {
      /**
       * @description Allows admins to create transactions.
       * @path /transactions/{transactionId}
       * @allow (create) If the requesting user is an admin.
       * @deny (create) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow create: if isAdmin();
      /**
       * @description Allows admins to get transaction information.
       * @path /transactions/{transactionId}
       * @allow (get) If the requesting user is an admin.
       * @deny (get) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow get: if isAdmin();
      /**
       * @description Allows admins to update transaction information.
       * @path /transactions/{transactionId}
       * @allow (update) If the requesting user is an admin.
       * @deny (update) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow update: if isAdmin() && resource != null;
      /**
       * @description Allows admins to delete transactions.
       * @path /transactions/{transactionId}
       * @allow (delete) If the requesting user is an admin.
       * @deny (delete) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow delete: if isAdmin() && resource != null;
      /**
       * @description Allows admins to list transactions.
       * @path /transactions/{transactionId}
       * @allow (list) If the requesting user is an admin.
       * @deny (list) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow list: if isAdmin();
    }

    match /advertisements/{advertisementId} {
      /**
       * @description Allows a user to create an advertisement if their UID matches the advertiserId.
       * @path /advertisements/{advertisementId}
       * @allow (create) If the advertiserId matches the authenticated user's UID.
       * @deny (create) If the advertiserId does not match the authenticated user's UID.
       * @principle Enforces document ownership and validates relational integrity.
       */
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      /**
       * @description Allows anyone to get advertisement information.
       * @path /advertisements/{advertisementId}
       * @allow (get) No authentication required.
       * @deny (get) No conditions for denial.
       * @principle Allows public read access.
       */
      allow get: if true;
      /**
       * @description Allows a user to update their own advertisement.
       * @path /advertisements/{advertisementId}
       * @allow (update) If the advertiserId matches the authenticated user's UID.
       * @deny (update) If the advertiserId does not match the authenticated user's UID.
       * @principle Enforces document ownership.
       */
      allow update: if isExistingOwner(resource.data.advertiserId);
      /**
       * @description Allows a user to delete their own advertisement.
       * @path /advertisements/{advertisementId}
       * @allow (delete) If the advertiserId matches the authenticated user's UID.
       * @deny (delete) If the advertiserId does not match the authenticated user's UID.
       * @principle Enforces document ownership.
       */
      allow delete: if isExistingOwner(resource.data.advertiserId);
      /**
       * @description Allows anyone to list advertisements.
       * @path /advertisements/{advertisementId}
       * @allow (list) No authentication required.
       * @deny (list) No conditions for denial.
       * @principle Allows public read access.
       */
      allow list: if true;
    }

    match /advertiserApplications/{applicationId} {
      /**
       * @description Allows a user to create an application if their UID matches the userId.
       * @path /advertiserApplications/{applicationId}
       * @allow (create) If the userId matches the authenticated user's UID.
       * @deny (create) If the userId does not match the authenticated user's UID.
       * @principle Enforces document ownership and validates relational integrity.
       */
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      /**
       * @description Allows admins to get advertiser application information.
       * @path /advertiserApplications/{applicationId}
       * @allow (get) If the requesting user is an admin.
       * @deny (get) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow get: if isAdmin();
      /**
       * @description Allows admins to update advertiser applications.
       * @path /advertiserApplications/{applicationId}
       * @allow (update) If the requesting user is an admin.
       * @deny (update) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow update: if isAdmin() && resource != null;
      /**
       * @description Allows admins to delete advertiser applications.
       * @path /advertiserApplications/{applicationId}
       * @allow (delete) If the requesting user is an admin.
       * @deny (delete) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow delete: if isAdmin() && resource != null;
      /**
       * @description Allows admins to list advertiser applications.
       * @path /advertiserApplications/{applicationId}
       * @allow (list) If the requesting user is an admin.
       * @deny (list) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow list: if isAdmin();
    }

    match /api_logs/{logId} {
      /**
       * @description Allows admins to create API logs.
       * @path /api_logs/{logId}
       * @allow (create) If the requesting user is an admin.
       * @deny (create) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow create: if isAdmin();
      /**
       * @description Allows admins to get API logs.
       * @path /api_logs/{logId}
       * @allow (get) If the requesting user is an admin.
       * @deny (get) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow get: if isAdmin();
      /**
       * @description Allows admins to update API logs.
       * @path /api_logs/{logId}
       * @allow (update) If the requesting user is an admin.
       * @deny (update) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow update: if isAdmin() && resource != null;
      /**
       * @description Allows admins to delete API logs.
       * @path /api_logs/{logId}
       * @allow (delete) If the requesting user is an admin.
       * @deny (delete) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow delete: if isAdmin() && resource != null;
      /**
       * @description Allows admins to list API logs.
       * @path /api_logs/{logId}
       * @allow (list) If the requesting user is an admin.
       * @deny (list) If the requesting user is not an admin.
       * @principle Enforces role-based access control.
       */
      allow list: if isAdmin();
    }
    
    match /leaderboards/topHolders {
        /**
         * @description Allows anyone to read the leaderboard. Only admins can write.
         * @path /leaderboards/topHolders
         * @allow (get) No authentication required.
         * @allow (list) No authentication required.
         * @deny (create) Only admins can create the leaderboard.
         * @deny (update) Only admins can update the leaderboard.
         * @deny (delete) Only admins can delete the leaderboard.
         * @principle Public read, admin-only write.
         */
        allow get: if true;
        allow list: if true;
        allow create: if isAdmin();
        allow update: if isAdmin() && resource != null;
        allow delete: if isAdmin() && resource != null;
    }
  }
}