/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open access for certain public data (e.g., leaderboards) with strict ownership and role-based access control for user accounts, tenants, and sensitive administrative information.  The ruleset prioritizes preventing unauthorized data modification while remaining permissive on data shapes to allow for rapid prototyping.
 *
 * Data Structure:
 * - /accounts/{accountId}: User account data, secured to the owner.
 * - /accounts/{accountId}/transactions/{transactionId}: Transaction history for a user, secured to the owner.
 * - /tenants/{tenantId}: Tenant projects, secured for admin-only management.
 * - /transactions/{transactionId}: Global transaction logs, secured for admin-only access.
 * - /advertisements/{advertisementId}: Advertisement data, secured to the owning advertiser.
 * - /advertiserApplications/{applicationId}: Applications to become an advertiser, secured for admin-only review.
 * - /admins/{adminId}: List of admin UIDs, secured for admin-only management.
 * - /api_logs/{logId}: API access logs, secured for admin-only access.
 * - /leaderboards/topHolders: Publicly readable leaderboard data.
 *
 * Key Security Decisions:
 * - Admin Role: The ruleset does not implement a mechanism to configure or assign admin roles on-chain. Instead, it assumes admin status is managed out-of-band (e.g., via the Firebase console) by populating the `/admins/{adminId}` collection.
 * - No User Listing: Listing all user accounts via `/accounts` is explicitly denied to protect user privacy. Only individual account `get` requests are allowed for authenticated users.
 * - Denormalization: No denormalization is used in this version.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Authentication required for most operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Enforces document ownership and existence for updates/deletes.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin.
     * @path N/A (Helper function)
     * @allow N/A (Helper function)
     * @deny N/A (Helper function)
     * @principle Role-based access control.
     */
    function isAdmin() {
      return exists(/databases/(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (create) If the user is an admin creating their own admin document.
     * @deny (create) If a non-admin attempts to create an admin document.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.auth.uid == adminId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /accounts/{accountId} collection.
     * @path /accounts/{accountId}
     * @allow (get) If the user is the owner of the account.
     * @deny (update) If a user tries to update an account they don't own.
     * @principle Enforces account ownership for reads and writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Rules for /accounts/{accountId}/transactions/{transactionId} subcollection.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) If the user is the owner of the parent account.
     * @deny (update) If a user tries to update a transaction in an account they don't own.
     * @principle Enforces account ownership for managing transactions.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isOwner(accountId) && resource != null;
      allow delete: if isOwner(accountId) && resource != null;
    }

    /**
     * @description Rules for /tenants/{tenantId} collection.
     * @path /tenants/{tenantId}
     * @allow (create) If the user is an admin.
     * @deny (update) If a non-admin attempts to update a tenant.
     * @principle Enforces admin-only access for tenant management.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /transactions/{transactionId} collection.
     * @path /transactions/{transactionId}
     * @allow (get) If the user is an admin.
     * @deny (create) If a non-admin attempts to create a transaction.
     * @principle Enforces admin-only access for transaction logging.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /advertisements/{advertisementId} collection.
     * @path /advertisements/{advertisementId}
     * @allow (create) If the user is the advertiser creating their own advertisement.
     * @deny (update) If a user tries to update an advertisement they don't own.
     * @principle Enforces advertisement ownership for writes.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && resource != null && resource.data.advertiserId == request.auth.uid;
      allow delete: if isSignedIn() && resource != null && resource.data.advertiserId == request.auth.uid;
    }

    /**
     * @description Rules for /advertiserApplications/{applicationId} collection.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) If the user is creating their own application.
     * @deny (update) If a non-admin attempts to update an application.
     * @principle Enforces admin-only access for reviewing applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for /api_logs/{logId} collection.
     * @path /api_logs/{logId}
     * @allow (get) If the user is an admin.
     * @deny (create) If a non-admin attempts to create a log entry.
     * @principle Enforces admin-only access for API logging.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for /leaderboards/topHolders document.
     * @path /leaderboards/topHolders
     * @allow (get) Public read access for the leaderboard.
     * @deny (create) All writes are denied.
     * @principle Public read, no write access.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}