/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a multi-layered security model for the VSD Network, incorporating user-based access control and administrative roles.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs. Grants admin-level privileges.
 * - /accounts/{accountId}: Stores user account information, keyed by UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for each account.
 * - /tenants/{tenantId}: Stores partner tenant data.
 * - /transactions/{transactionId}: A global log of all transactions.
 * - /advertisements/{advertisementId}: Stores advertisement campaign details.
 * - /advertiserApplications/{applicationId}: Stores applications from users to become advertisers.
 * - /api_logs/{logId}: Logs API access requests.
 * - /leaderboards/topHolders: Stores a single document with pre-computed leaderboard data.
 *
 * Key Security Decisions:
 * - Admin Role: The `admins` collection determines administrative privileges.
 * - Account Ownership: User accounts and their subcollections (e.g., `transactions`) are strictly owned by the user with the matching UID.
 * - Public Leaderboard: The `leaderboards/topHolders` document is publicly readable.
 * - Tenant Access: Tenant data and API logs are secured to prevent unauthorized access and modification.
 * - Read-Only API Logs: The `api_logs` collection is append-only, preventing modification of historical log data.
 *
 * Denormalization for Authorization:
 * - Admin Role: To avoid expensive `get()` operations, the rules check for admin status directly in the `admins` collection.
 *
 * Structural Segregation:
 * - Private vs. Public: The `leaderboards` collection contains a single document intended for public read access, while other collections are secured based on user roles or ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin access to manage the list of admin accounts.
     * @path /admins/{adminId}
     * @allow (create, update, delete) if request.auth.uid matches the adminId, and the user is an existing admin.
     * @allow (get, list) if the request is made by an authenticated admin.
     * @deny (create, update, delete) if the request is not made by an authenticated admin.
     * @principle Enforces admin-only access to manage the list of admin accounts.
     */
    match /admins/{adminId} {
      function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
      }
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to user account data.
     * @path /accounts/{accountId}
     * @allow (get) if the request is made by the account owner or an admin.
     * @allow (list) if the request is made by an admin.
     * @allow (create) if the request.auth.uid matches the accountId
     * @allow (update, delete) if the request is made by the account owner or an admin.
     * @deny (create, update, delete) if the request is not made by the account owner or an admin.
     * @principle Enforces account ownership and admin oversight for user accounts.
     */
    match /accounts/{accountId} {
      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }
      function isExistingOwner(accountId) {
        return isOwner(accountId) && resource != null;
      }
      allow get: if isOwner(accountId) || isAdmin();
      allow list: if isAdmin();
      allow create: if request.auth.uid == accountId;
      allow update, delete: if isOwner(accountId) || isAdmin();
    }

    /**
     * @description Controls access to user-specific transaction history.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list) if the request is made by the account owner or an admin.
     * @allow (create) if the request is made by the account owner or an admin.
     * @allow (update, delete) if the request is made by an admin.
     * @deny (create) if the request is not made by the account owner or an admin.
     * @deny (update, delete) if the request is not made by an admin.
     * @principle Enforces account ownership for transaction history, with admin oversight.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }
      allow get, list: if isOwner(accountId) || isAdmin();
      allow create: if isOwner(accountId) || isAdmin();
      allow update, delete: if isAdmin();
    }

    /**
     * @description Controls access to tenant data.
     * @path /tenants/{tenantId}
     * @allow (get, list) if the request is made by an admin.
     * @allow (create, update, delete) if the request is made by an admin.
     * @deny (get, list, create, update, delete) if the request is not made by an admin.
     * @principle Enforces admin-only access to tenant management.
     */
    match /tenants/{tenantId} {
      allow get, list, create, update, delete: if isAdmin();
    }

    /**
     * @description Controls access to the global transaction log.
     * @path /transactions/{transactionId}
     * @allow (get, list) if the request is made by an admin.
     * @allow (create) if the request is made by an admin.
     * @deny (update, delete) always, as transaction records should be immutable.
     * @deny (get, list, create) if the request is not made by an admin.
     * @principle Enforces admin-only access to the global transaction log.
     */
    match /transactions/{transactionId} {
      allow get, list, create: if isAdmin();
      allow update, delete: if false;
    }

    /**
     * @description Controls access to advertisement data.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) if true (publicly readable).
     * @allow (create) if the request is made by an authenticated user and the advertiserId matches their UID.
     * @allow (update, delete) if the request is made by the ad's owner (advertiser).
     * @deny (create) if the request is not made by an authenticated user or the advertiserId does not match their UID.
     * @deny (update, delete) if the request is not made by the ad's owner.
     * @principle Allows public read access to advertisements, but enforces ownership for creation, updates, and deletions.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if request.auth != null && request.resource.data.advertiserId == request.auth.uid;
      allow update, delete: if request.auth != null && resource.data.advertiserId == request.auth.uid;
    }

    /**
     * @description Controls access to advertiser application data.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) if the request is made by the user and userId matches the auth UID.
     * @allow (get, list, update, delete) if the request is made by an admin.
     * @deny (create) if the request is not made by the user or the userId does not match the auth UID.
     * @deny (get, list, update, delete) if the request is not made by an admin.
     * @principle Allows users to create their own applications, but restricts management to admins.
     */
    match /advertiserApplications/{applicationId} {
      allow create: if request.auth != null && request.resource.data.userId == request.auth.uid;
      allow get, list, update, delete: if isAdmin();
    }

    /**
     * @description Logs API access requests, append-only by a trusted source.
     * @path /api_logs/{logId}
     * @allow create: if isAdmin();
     * @deny get, list, update, delete: if true;
     * @principle Enforces append-only logging by a trusted source (e.g., backend functions).
     */
    match /api_logs/{logId} {
      allow create: if isAdmin();
      allow get, list, update, delete: if false;
    }

    /**
     * @description Allows public read access to the top VSD token holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow get, list: if true;
     * @deny create, update, delete: if true; // Should only be written by backend processes.
     * @principle Allows public read access to the leaderboard.
     */
    match /leaderboards/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false; // Should only be written by backend processes.
    }
  }
}