/**
 * @fileoverview Firestore Security Rules for VNDR Music Admin Dashboard
 *
 * Core Philosophy:
 * This ruleset implements a role-based access control system with a super-admin override.
 * Access is primarily granted to admins, with specific exceptions for public data.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores administrator user IDs.
 * - /accounts/{accountId}: Stores user account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for individual accounts.
 * - /tenants/{tenantId}: Stores integrated partner project data (API keys, status).
 * - /transactions/{transactionId}: A global log of all transactions.
 * - /advertisements/{advertisementId}: Stores advertisement campaign data.
 * - /advertiserApplications/{applicationId}: Stores applications to become an advertiser.
 * - /api_logs/{logId}: Stores logs of API requests.
 * - /leaderboards/topHolders: Stores a pre-computed list of top VSD token holders.
 *
 * Key Security Decisions:
 * - Super Admin: The user with UID 'eiMBgcJ3KhWGesl8J78oYFHiquy2' is always granted full access.
 * - Admin Role: General admin access is controlled via the /admins collection.
 * - No User Listing: Listing of users is denied to prevent information disclosure.
 * - Public Leaderboard: The /leaderboards/topHolders document is publicly readable.
 * - Owner-Only on Accounts and Advertisements: `accounts` and `advertisements` are read/write accessible to the owner only
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the requesting user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the requesting user is the owner of the resource.
     * @param {string} userId The user ID to check against.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

     /**
      * @description Checks if the requesting user is the owner of the resource and the resource exists.
      * @param {string} userId The user ID to check against.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the requesting user is a super admin.
     */
    function isSuperAdmin() {
      return request.auth.uid == 'eiMBgcJ3KhWGesl8J78oYFHiquy2';
    }

    /**
     * @description Checks if the requesting user is an admin.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Grants full access to the super admin.
     */
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }

    /**
     * @description Defines access rules for the /admins collection.
     * @path /admins/{adminId}
     * @allow (create) - A super admin can add a new admin.
     * @allow (get) - Any authenticated user can get an admin document.
     * @deny (create) - A non-admin user cannot create an admin document.
     * @deny (delete) - A non-admin user cannot delete an admin document.
     * @principle Grants admin management only to other admins and the super admin.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the /accounts collection.
     * @path /accounts/{accountId}
     * @allow (get) - Any authenticated user can get their own account.
     * @allow (create) - A user can create their own account (self-registration).
     * @allow (update) - A user can update their own account.
     * @deny (create) - A user cannot create an account for another user.
     * @deny (delete) - Only an admin user can delete an account.
     * @principle Enforces account ownership and admin-only deletion.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId) || isAdmin();
      allow list: if false;
      allow create: if isOwner(accountId) && request.resource.data.uid == request.auth.uid;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isAdmin();
    }

    /**
     * @description Defines access rules for the /accounts/{accountId}/transactions subcollection.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get) - The owner of the account or an admin can get a transaction.
     * @allow (list) - The owner of the account or an admin can list transactions.
     * @deny (create) - Only the system can create transaction records for an account.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId) || isAdmin();
      allow list: if isOwner(accountId) || isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (get) - Any admin user can get a tenant's information.
     * @allow (create) - Only an admin user can create a new tenant.
     * @allow (update) - Only an admin user can update a tenant's information.
     * @deny (create) - A non-admin user cannot create a new tenant.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the /transactions collection.
     * @path /transactions/{transactionId}
     * @allow (get) - Only an admin user can get a transaction record.
     * @allow (list) - Only an admin user can list transaction records.
     * @deny (create) - No one can create documents in this collection directly through the client.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the /advertisements collection.
     * @path /advertisements/{advertisementId}
     * @allow (get) - Public access for reading advertisement details.
     * @allow (create) - An advertiser can create their own advertisement.
     * @allow (update) - An advertiser can update their own advertisement.
     * @deny (create) - A user cannot create an advertisement for another user.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId) && request.resource.data.advertiserId == resource.data.advertiserId;
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Defines access rules for the /advertiserApplications collection.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) - A user can create their own advertiser application.
     * @allow (get) - Admins can get advertiser applications.
     * @allow (list) - Admins can list advertiser applications.
     * @allow (update) - Admins can update the status of advertiser applications.
     * @deny (create) - A user cannot create an application for another user.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the /api_logs collection.
     * @path /api_logs/{logId}
     * @allow (get) - Only admin users can get API logs.
     * @allow (list) - Only admin users can list API logs.
     * @deny (create) - No direct client-side creation of API logs.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines access rules for the /leaderboards/topHolders document.
     * @path /leaderboards/topHolders
     * @allow (get) - Public read access to the leaderboard data.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}