/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data and restricts access to sensitive collections.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores individual user account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for each account.
 * - /tenants/{tenantId}: Stores tenant information.
 * - /transactions/{transactionId}: A global log of all transactions, restricted to admin access.
 * - /advertisements/{advertisementId}: Stores advertisement campaign data.
 *
 * Key Security Decisions:
 * - User accounts are secured based on ownership (Firebase Auth UID).
 * - Listing of all accounts is explicitly denied for non-admin users.
 * - The global transactions collection is secured for admin-only access.
 * - Data shapes are not strictly validated to allow for rapid iteration.
 *
 * Denormalization for Authorization:
 *  - Account documents use the Firebase Auth UID as the document ID, allowing for easy ownership checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user account data, ensuring only the owner can read and write.
     * @path /accounts/{accountId}
     * @allow (create) User with UID 'user123' can create their own account document.
     * @allow (get, update, delete) User with UID 'user123' can read, update, and delete their own account document.
     * @deny (create) User with UID 'user456' cannot create an account document with ID 'user123'.
     * @deny (get, update, delete) User with UID 'user456' cannot read, update, or delete the account document with ID 'user123'.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures transaction history for each account, allowing only the account owner to access their own transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) User with UID 'user123' can create a transaction document under their account.
     * @allow (get, list, update, delete) User with UID 'user123' can read, list, update, and delete transaction documents under their account.
     * @deny (create) User with UID 'user456' cannot create a transaction document under account 'user123'.
     * @deny (get, list, update, delete) User with UID 'user456' cannot read, list, update, or delete transaction documents under account 'user123'.
     * @principle Restricts access to a user's own data tree.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures tenant information, restricting access to authorized users.
     * @path /tenants/{tenantId}
     * @allow TODO: Define the conditions under which a tenant can be created, read, updated, or deleted. (e.g., admin role)
     * @deny No one can perform any operation by default.
     * @principle Placeholder for tenant access control.
     */
    match /tenants/{tenantId} {
        // TODO: Implement proper tenant access control based on roles or other criteria
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Secures the global transaction log, allowing only administrators to access it.
     * @path /transactions/{transactionId}
     * @allow TODO: Define the conditions under which a transaction can be created, read, updated, or deleted. (e.g., admin role)
     * @deny No one can perform any operation by default.
     * @principle Restricts access to sensitive data.
     */
    match /transactions/{transactionId} {
         // TODO: Implement proper admin-only access
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores all advertisement campaigns that users can interact with to earn VSD Lite.
     * @path /advertisements/{advertisementId}
     * @allow Public read with owner-only writes
     */
    match /advertisements/{advertisementId} {
         // CRITICAL: Cannot implement owner-only writes. The 'Advertisement' entity is missing an 'ownerId' or 'authorId' field.
      allow get, list: if true;
      allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return isSignedIn() && request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}