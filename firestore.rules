/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for user accounts and their associated data,
 *              while providing public read access to leaderboards and restricting administrative data and logs
 *              to authorized personnel.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs.
 * - /accounts/{accountId}: Stores user account data, keyed by UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores user-specific transaction history.
 * - /tenants/{tenantId}: Stores tenant (partner project) data.
 * - /transactions/{transactionId}: Stores a global log of all transactions.
 * - /advertisements/{advertisementId}: Stores advertisement campaigns.
 * - /advertiserApplications/{applicationId}: Stores applications to become an advertiser.
 * - /api_logs/{logId}: Stores logs of API requests.
 * - /leaderboards/topHolders: Stores leaderboard data (publicly readable).
 *
 * Key Security Decisions:
 * - User accounts and transactions are strictly owned by the user.
 * - Listing all users is disallowed for privacy.
 * - Admin and API log data is restricted to authenticated users.
 * - Leaderboard data is publicly readable but only writable by a trusted source (e.g., a Cloud Function with admin privileges - not covered by these rules).
 * - The default security posture for ambiguous relationships is strict owner-only access.
 *
 * Denormalization for Authorization:
 *   To simplify and optimize rules, the following denormalization strategies are employed:
 *   - User-specific data (transactions) are stored as subcollections under the user's account.
 *     This avoids costly `get()` operations to verify user ownership.
 *
 * Structural Segregation:
 *   - Publicly readable data (leaderboard) is stored in a separate top-level collection to avoid complex read rules.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Manages access to admin user IDs. Only authenticated users can read and write.
     * @path /admins/{adminId}
     * @allow (read,write) if isSignedIn()
     * @deny (read,write) if !isSignedIn()
     * @principle Restricts admin data to authenticated users
     */
    match /admins/{adminId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages user account data, enforcing ownership.
     * @path /accounts/{accountId}
     * @allow (get) User can read their own account data.
     * @allow (create,update,delete) User can create, update, delete their own account.
     * @deny (get) User cannot read other accounts' data.
     * @deny (create,update,delete) User cannot modify other accounts' data.
     * @principle Enforces document ownership for writes and reads.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false; // Prevent listing all accounts

      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Manages user-specific transaction history, enforcing ownership.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get,list) User can read their own transaction history.
     * @allow (create,update,delete) User can create, update, delete their own transaction.
     * @deny (get,list) User cannot read other accounts' transaction data.
     * @deny (create,update,delete) User cannot modify other accounts' transaction data.
     * @principle Enforces document ownership for writes and reads within a subcollection.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Manages tenant data. Only authenticated users can read and write.
     * @path /tenants/{tenantId}
     * @allow (read,write) if isSignedIn()
     * @deny (read,write) if !isSignedIn()
     * @principle Restricts tenant data to authenticated users
     */
    match /tenants/{tenantId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages global transaction logs. Only authenticated users can read and write.
     * @path /transactions/{transactionId}
     * @allow (read,write) if isSignedIn()
     * @deny (read,write) if !isSignedIn()
     * @principle Restricts transaction log data to authenticated users
     */
    match /transactions/{transactionId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Manages advertisement campaigns, enforcing advertiser ownership.
     * @path /advertisements/{advertisementId}
     * @allow (get,list) Anyone can read the advertisement
     * @allow (create,update,delete) Advertiser can create, update, delete their own advertisement.
     * @deny (create,update,delete) User cannot modify other accounts' advertisements.
     * @principle Enforces document ownership for writes.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if request.auth.uid == request.resource.data.advertiserId;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Manages applications to become an advertiser. Only authenticated users can create.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) Only authenticated user can create the application
     * @deny (read,update,delete) No one can read, update or delete the application
     * @principle Restricts the data to authenticated users for create operation.
     */
    match /advertiserApplications/{applicationId} {
      allow get, list: if false;
      allow create: if isSignedIn();
      allow update, delete: if false;
    }
      /**
       * @description Manages API access logs. Only authenticated users can read and write.
       * @path /api_logs/{logId}
       * @allow (read,write) if isSignedIn()
       * @deny (read,write) if !isSignedIn()
       * @principle Restricts API log data to authenticated users
       */
    match /api_logs/{logId} {
      allow get, list: if isSignedIn();
      allow create, update, delete: if isSignedIn();
    }

    /**
     * @description Provides public read access to the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (read) Anyone can read the leaderboard.
     * @deny (write) No one can write to the leaderboard (must be done by trusted backend).
     * @principle Allows public read access to leaderboard data.
     */
    match /leaderboards/{leaderboardId} {
      allow get, list: if true;
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}