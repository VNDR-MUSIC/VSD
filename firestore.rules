/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for accounts and their associated transactions.
 * Tenants are secured with owner-only access. A global transactions log is present and only accessible to authenticated users.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores individual user account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transactions for a specific user account.
 * - /tenants/{tenantId}: Stores tenant data.
 * - /transactions/{transactionId}: A global log of all transactions.
 *
 * Key Security Decisions:
 * - Users can only access their own account data and associated transactions.
 * - Listing of accounts is disallowed.
 * - Listing of tenants is disallowed.
 * - Global transactions log accessible to authenticated users but not listable.
 * - Data validation is relaxed in prototype mode, focusing on authorization and relational integrity.
 *
 * Denormalization for Authorization:
 * - The `accountId` in `/accounts/{accountId}/transactions/{transactionId}` must match the parent `accountId`. This ensures that transactions are always associated with the correct account.
 *
 * Structural Segregation:
 * - Public vs. private data is managed through collection-level access control rather than boolean flags within documents.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user accounts with owner-only access.
     * @path /accounts/{accountId}
     * @allow (create) User with UID 'user_abc' can create their own account if request.auth.uid == 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get their own account.
     * @allow (update) User with UID 'user_abc' can update their own account.
     * @allow (delete) User with UID 'user_abc' can delete their own account.
     * @deny (create) User with UID 'user_xyz' cannot create an account with ID 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot get account 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update account 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete account 'user_abc'.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }

      function isExistingOwner(accountId) {
        return isSignedIn() && resource.data.uid == request.auth.uid;
      }

      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow update: if isOwner(accountId) && request.auth.uid == resource.data.uid;
      allow delete: if isOwner(accountId) && request.auth.uid == resource.data.uid;
    }

    /**
     * @description Secure user transactions with owner-only access based on the parent account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) User with UID 'user_abc' can create a transaction for their account 'user_abc'.
     * @allow (get) User with UID 'user_abc' can get a transaction for their account 'user_abc'.
     * @allow (update) User with UID 'user_abc' can update a transaction for their account 'user_abc'.
     * @allow (delete) User with UID 'user_abc' can delete a transaction for their account 'user_abc'.
     * @deny (create) User with UID 'user_xyz' cannot create a transaction under account 'user_abc'.
     * @deny (get) User with UID 'user_xyz' cannot get a transaction under account 'user_abc'.
     * @deny (update) User with UID 'user_xyz' cannot update a transaction under account 'user_abc'.
     * @deny (delete) User with UID 'user_xyz' cannot delete a transaction under account 'user_abc'.
     * @principle Enforces document ownership and relational integrity for transactions.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }

        function isExistingOwner(accountId) {
        return isSignedIn() && resource.data.accountId == accountId;
      }

      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId);
      allow update: if isOwner(accountId);
      allow delete: if isOwner(accountId);
    }

    /**
     * @description Secure tenants with owner-only access.
     * @path /tenants/{tenantId}
     * @allow (create) Authenticated user can create a tenant.
     * @allow (get) Authenticated user can get a tenant.
     * @allow (update) Authenticated user can update a tenant.
     * @allow (delete) Authenticated user can delete a tenant.
     * @deny (create) Unauthenticated user cannot create a tenant.
     * @deny (get) Unauthenticated user cannot get a tenant.
     * @deny (update) Unauthenticated user cannot update a tenant.
     * @deny (delete) Unauthenticated user cannot delete a tenant.
     * @principle Restricts access to tenants to authenticated users only.
     */
    match /tenants/{tenantId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isExisting() {
            return exists(/databases/$(database)/documents/tenants/$(tenantId));
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isExisting();
        allow delete: if isSignedIn() && isExisting();
    }

    /**
     * @description A global log of all transactions accessible to authenticated users.
     * @path /transactions/{transactionId}
     * @allow (create) Authenticated user can create a transaction log.
     * @allow (get) Authenticated user can get a transaction log.
     * @allow (update) Authenticated user can update a transaction log.
     * @allow (delete) Authenticated user can delete a transaction log.
     * @deny (create) Unauthenticated user cannot create a transaction log.
     * @deny (get) Unauthenticated user cannot get a transaction log.
     * @deny (update) Unauthenticated user cannot update a transaction log.
     * @deny (delete) Unauthenticated user cannot delete a transaction log.
     * @principle Restricts access to transactions log to authenticated users only.
     */
    match /transactions/{transactionId} {
        function isSignedIn() {
            return request.auth != null;
        }

        function isExisting() {
            return exists(/databases/$(database)/documents/transactions/$(transactionId));
        }

        allow get: if isSignedIn();
        allow list: if false;
        allow create: if isSignedIn();
        allow update: if isSignedIn() && isExisting();
        allow delete: if isSignedIn() && isExisting();
    }
  }
}