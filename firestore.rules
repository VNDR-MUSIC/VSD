/**
 * @fileoverview Firestore Security Rules for the VSD Network.
 *
 * Core Philosophy:
 * This ruleset prioritizes secure data access based on user roles (admin),
 * ownership (user accounts and associated data), and controlled public access
 * where appropriate (e.g., leaderboards). Data shape validation is relaxed to
 * enable rapid prototyping.
 *
 * Data Structure:
 * - /admins/{adminId}: Admin user role assignments.
 * - /accounts/{accountId}: User account information, keyed by UID.
 * - /accounts/{accountId}/transactions/{transactionId}: User-specific transaction history.
 * - /tenants/{tenantId}: Partner tenant projects.
 * - /transactions/{transactionId}: Global transaction log (admin-only).
 * - /advertisements/{advertisementId}: Advertisement campaigns.
 * - /advertiserApplications/{applicationId}: Applications to become an advertiser.
 * - /api_logs/{logId}: API access logs.
 * - /leaderboards/topHolders: Leaderboard data.
 *
 * Key Security Decisions:
 * - Admin Role: The `admins` collection is the source of truth for admin privileges.
 * - Owner-Only Access: User accounts and their subcollections are strictly controlled by the account owner (UID).
 * - Public Read Access: The `leaderboards` collection is publicly readable.
 * - Global Transaction Log: The `transactions` collection can only be read or written by admins.
 * - Data Denormalization: No data denormalization has been implemented in this ruleset.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Only admins can manage the list of admins.
     * @path /admins/{adminId}
     * @allow (create, update, delete) if request.auth is an admin.
     * @deny (create, update, delete) if request.auth is not an admin.
     * @principle Enforces role-based access control for managing admin privileges.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows a user to manage their own account.
     * @path /accounts/{accountId}
     * @allow (create) if the user is creating their own account.
     * @allow (get, update, delete) if the user is the account owner.
     * @deny (create, update, delete) if the user is not the account owner.
     * @principle Enforces document ownership for user account data.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isSignedIn() && isExistingOwner(accountId) && request.resource.data.uid == accountId;
      allow delete: if isSignedIn() && isExistingOwner(accountId);
    }

    /**
     * @description Allows a user to manage their own transaction history.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create, get, update, delete, list) if the user is the account owner.
     * @deny (create, get, update, delete, list) if the user is not the account owner.
     * @principle Enforces document ownership for user-specific transaction data.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isSignedIn() && isExistingOwner(accountId);
      allow delete: if isSignedIn() && isExistingOwner(accountId);
    }

    /**
     * @description Allows admins to manage tenants.
     * @path /tenants/{tenantId}
     * @allow (create, get, update, delete) if the user is an admin.
     * @deny (create, get, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control for managing tenants.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Only admins can access the global transaction log.
     * @path /transactions/{transactionId}
     * @allow (create, get, update, delete) if the user is an admin.
     * @deny (create, get, update, delete) if the user is not an admin.
     * @principle Restricts access to sensitive transaction data to administrators.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows anyone to read advertisements, but only the advertiser can manage them.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) if the user is the advertiser.
     * @deny (create, update, delete) if the user is not the advertiser.
     * @principle Allows public read access with owner-only writes.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Allows anyone to create an advertiser application, but only admins can manage them.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) to anyone.
     * @allow (get, update, delete) if the user is an admin.
     * @deny (get, update, delete) if the user is not an admin.
     * @principle Allows public create access with admin-only management.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Only tenants can create API logs, and only admins can read them.
     * @path /api_logs/{logId}
     * @allow (create) to tenants.
     * @allow (get, list, update, delete) if the user is an admin.
     * @deny (get, list, update, delete) if the user is not an admin.
     * @principle Restricts access to API logs based on role.
     */
    match /api_logs/{logId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && request.auth.token.tenantId != null;
      allow update: if false;
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows anyone to read the leaderboard, but prevents modifications.
     * @path /leaderboards/topHolders
     * @allow (get, list) to anyone.
     * @deny (create, update, delete) to everyone.
     * @principle Provides public read access to leaderboard data.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}