/**
 * @fileoverview Firestore Security Rules for the VSD Network application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data and associated transactions.
 * Tenants are managed with owner-only access. A global transaction log exists, but is currently open for read access.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account information, with accountId matching the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for each account.
 * - /tenants/{tenantId}: Stores partner tenant data.
 * - /transactions/{transactionId}: A global transaction log.
 *
 * Key Security Decisions:
 * - Users can only access their own account data and transactions.
 * - Listing of all accounts is denied to prevent unauthorized data access.
 * - Tenant management is restricted.
 * - Global transaction log is publicly readable (potentially for analytics), but this may need to be restricted in the future.
 *
 * Denormalization for Authorization:
 * - The `accountId` field in the `/accounts/{accountId}/transactions/{transactionId}` subcollection MUST match the parent `accountId` to ensure relational integrity and efficient security checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces user-ownership for account data. Only the authenticated user can read or write their own account.
     * @path /accounts/{accountId}
     * @allow (create) - User with UID 'user_abc' can create their account if request.auth.uid == 'user_abc'.
     * @allow (get, update, delete) - User with UID 'user_abc' can get, update, or delete their account.
     * @deny (create) - User with UID 'user_xyz' cannot create an account with ID 'user_abc'.
     * @deny (get, update, delete) - User with UID 'user_xyz' cannot get, update, or delete account 'user_abc'.
     * @deny (list) - Listing all accounts is forbidden.
     * @principle Enforces document ownership for all operations.
     */
    match /accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }

      function isExistingOwner(accountId) {
        return isOwner(accountId) && exists(resource);
      }
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Enforces user-ownership for transaction data within an account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) - User 'user_abc' can create a transaction under their account if request.auth.uid == 'user_abc' and accountId matches.
     * @allow (get, list, update, delete) - User 'user_abc' can get, list, update, and delete transactions under their own account.
     * @deny (create) - User 'user_xyz' cannot create a transaction under account 'user_abc'.
     * @deny (get, list, update, delete) - User 'user_xyz' cannot get, list, update, or delete transactions under account 'user_abc'.
     * @principle Enforces document ownership and relational integrity for transaction data.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }

      function isExistingOwner(accountId) {
        return isOwner(accountId) && exists(resource);
      }
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Restricts access to tenant data to owner-only.
     * @path /tenants/{tenantId}
     * @allow (create, update, delete) - No one, tenant management not implemented.
     * @allow (get, list) - No one, tenant management not implemented.
     * @deny (create, update, delete, get, list) - All requests are denied.
     * @principle Placeholder for future tenant management implementation.
     */
    match /tenants/{tenantId} {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

        /**
         * @description Allows public read access to all transactions. Write operations are denied.
         * @path /transactions/{transactionId}
         * @allow (get, list) - Any user (or no user) can read the transaction.
         * @deny (create, update, delete) - No one can create, update, or delete transactions.
         * @principle Provides a public log of all transactions.  Consider restricting in the future.
         */
    match /transactions/{transactionId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}