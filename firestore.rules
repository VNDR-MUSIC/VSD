/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data and
 * restricts access to sensitive tenant and transaction information.  It prioritizes
 * security by default, ensuring that users can only access their own data unless
 * explicitly granted broader permissions. The transactions collection is read-only for all users.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account data.  The `accountId` MUST match the
 *   Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection of transactions
 *   related to a specific user account.
 * - /tenants/{tenantId}: Stores tenant project data, accessible only to admins (simulated).
 * - /transactions/{transactionId}: A log of all transactions, readable to all.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect privacy.
 * - The tenants collection is only available to admins.
 * - The transactions collection is globally readable but not writeable by anyone.
 *
 * Denormalization for Authorization:
 *  - The accountId is used to control access to /accounts/{accountId} and
 *    /accounts/{accountId}/transactions/{transactionId}, ensuring that only the
 *    authenticated user with a matching UID can access the data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Rules for the /accounts collection.
     * @path /accounts/{accountId}
     * @allow (create) - Allow a user to create their own account if the accountId matches their UID.
     * @allow (get, update, delete) - Allow access if the accountId matches the authenticated user's UID.
     * @deny (list) - Prevent listing of all accounts.
     * @deny (create) - Deny if account id doesnt match logged in user.
     * @deny (update, delete) - Deny if account id doesnt match logged in user and resource doesnt exist.
     * @principle Enforces document ownership, prevents unauthorized data access.
     */
    match /accounts/{accountId} {
      // Allow a user to create their own account if the accountId matches their UID.
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == request.auth.uid;
      // Allow a user to read their own account if the accountId matches their UID.
      allow get: if isSignedIn() && isOwner(accountId);
      // Allow a user to update their own account if the accountId matches their UID and the account exists
      allow update: if isSignedIn() && isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      // Allow a user to delete their own account if the accountId matches their UID and the account exists.
      allow delete: if isSignedIn() && isExistingOwner(accountId);
      // Prevent listing of all accounts.
      allow list: if false;
    }

    /**
     * @description Rules for the /accounts/{accountId}/transactions collection.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) - Allow creation if the accountId matches the user's UID.
     * @allow (get, list) - Allow access if the accountId matches the authenticated user's UID.
     * @deny (update, delete) -  Deny if account id doesnt match logged in user and resource doesnt exist.
     * @principle Enforces document ownership, restricts access to transaction history.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      // Allow creation if the accountId matches the user's UID.
      allow create: if isSignedIn() && isOwner(accountId);
      // Allow read access if the accountId matches the authenticated user's UID.
      allow get, list: if isSignedIn() && isOwner(accountId);
      // Prevent updates and deletes.
      allow update, delete: if isSignedIn() && isExistingOwner(accountId);
    }

     /**
      * @description Rules for the /tenants collection.
      * @path /tenants/{tenantId}
      * @deny (create, get, list, update, delete) - Only accessible by admins.
      * @principle Restricts tenant data to administrators.
      */
    match /tenants/{tenantId} {
      // Only accessible by admins.
      allow create, get, list, update, delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Rules for the /transactions collection.
     * @path /transactions/{transactionId}
     * @allow (get, list) - Allow anyone to read transaction details.
     * @deny (create, update, delete) - Prevent unauthorized modifications.
     * @principle Provides a public log of transactions, prevents modifications.
     */
    match /transactions/{transactionId} {
      // Allow anyone to read transaction details.
      allow get, list: if true;
      // Prevent unauthorized modifications.
      allow create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}