/**
 * @file Firestore Security Rules
 * @description This ruleset implements a role-based access control system with super-admin override.
 *
 * Core Philosophy:
 *  - Admins: Designated users with 'superAdmin' claims can bypass all other rules for full read/write access.
 *  - Ownership: Users can only read and write their own account data and related transactions.
 *  - Public Read: Leaderboard data is publicly readable.
 *  - Tenant data write access is not defined beyond super admins, write operations will be disabled by default.
 *  - No user listing: Listing of users/accounts is not permitted to prevent information leakage.
 *
 * Data Structure:
 *  - /admins/{adminId}: List of super admins, where {adminId} is the Firebase Auth UID.
 *  - /accounts/{accountId}: User account data, where {accountId} is the Firebase Auth UID.
 *  - /accounts/{accountId}/transactions/{transactionId}: Transactions for a specific account.
 *  - /tenants/{tenantId}: Tenant project data.
 *  - /transactions/{transactionId}: Global transaction logs (admin-only).
 *  - /advertisements/{advertisementId}: Advertisement campaign data, owned by an advertiser account.
 *  - /advertiserApplications/{applicationId}: Applications from users to become advertisers.
 *  - /api_logs/{logId}: API access logs for tenants.
 *  - /leaderboards/topHolders: Publicly readable leaderboard data.
 *
 * Key Security Decisions:
 *  - Super Admin Override: Users with the 'superAdmin' claim in their Firebase Auth token bypass all other rules.
 *  - No User Listing: Listing of accounts and admins is explicitly denied.
 *
 * Denormalization for Authorization:
 *  - The 'superAdmin' claim is used on the user's auth token to grant elevated privileges, avoiding database reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if the user is signed in
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of the account (UID matches)
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to check if the user is an existing owner (UID matches and document exists)
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    // Helper function to check if the user has superAdmin claim
    function isSuperAdmin() {
      return request.auth.token.superAdmin == true;
    }

    /**
     * @description Allows super admins full access to all documents.
     * @path /{document=**}
     * @allow (read, write) if user has 'superAdmin' claim.
     * @deny (read, write) if user does not have 'superAdmin' claim.
     * @principle Grants full access to super admins.
     */
    match /{document=**} {
      allow read, write: if isSuperAdmin();
    }

    /**
     * @description Manages the list of super admins. Only super admins can manage this list.
     * @path /admins/{adminId}
     * @allow (create) if the user is a super admin.
     * @allow (get) if the user is a super admin.
     * @allow (update) if the user is a super admin.
     * @allow (delete) if the user is a super admin.
     * @deny (create, get, update, delete) if the user is not a super admin.
     * @principle Restricts admin management to existing admins.
     */
    match /admins/{adminId} {
      allow create: if false;
      allow get: if isSuperAdmin();
      allow list: if false;
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to user account data. Users can only read and write their own data.
     * @path /accounts/{accountId}
     * @allow (create) if the user's UID matches the account ID.
     * @allow (get) if the user's UID matches the account ID.
     * @allow (update) if the user's UID matches the account ID.
     * @allow (delete) if the user's UID matches the account ID.
     * @deny (create, get, update, delete) if the user's UID does not match the account ID.
     * @principle Enforces document ownership for account data.
     */
    match /accounts/{accountId} {
      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow get: if isOwner(accountId);
      allow list: if false;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Controls access to transaction data for a specific user account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) if the user's UID matches the account ID.
     * @allow (get) if the user's UID matches the account ID.
     * @allow (update) if the user's UID matches the account ID and the document exists.
     * @allow (delete) if the user's UID matches the account ID and the document exists.
     * @deny (create, get, update, delete) if the user's UID does not match the account ID.
     * @principle Enforces document ownership for transaction data.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow create: if isOwner(accountId);
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Controls access to tenant data.
     * @path /tenants/{tenantId}
     * @allow (get) if true.
     * @deny (create, update, delete) all writes are not permitted, only super admins have access for now.
     * @principle Restricts tenant data modifications.
     */
    match /tenants/{tenantId} {
      allow create: if false;
      allow get: if true;
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to global transaction logs.
     * @path /transactions/{transactionId}
     * @allow (get) if isSuperAdmin().
     * @deny (create, update, delete) only super admins can create and modify this.
     * @principle Restricts global transaction log access to admins.
     */
    match /transactions/{transactionId} {
      allow create: if false;
      allow get: if isSuperAdmin();
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to advertisement data. Advertisers can manage their own ads.
     * @path /advertisements/{advertisementId}
     * @allow (create) if the user's UID matches the advertiserId in the request data.
     * @allow (get) if true.
     * @allow (update) if the user's UID matches the advertiserId in the existing document.
     * @allow (delete) if the user's UID matches the advertiserId in the existing document.
     * @deny (create, get, update, delete) if the user's UID does not match the advertiserId.
     * @principle Enforces ownership of advertisement data.
     */
    match /advertisements/{advertisementId} {
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow get: if true;
      allow list: if true;
      allow update: if isSignedIn() && resource.data.advertiserId == request.auth.uid;
      allow delete: if isSignedIn() && resource.data.advertiserId == request.auth.uid;
    }

    /**
     * @description Controls access to advertiser application data.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) if the user's UID matches the userId in the request data.
     * @allow (get) if isSuperAdmin() || request.resource.data.userId == request.auth.uid;
     * @allow (update) if isSuperAdmin();
     * @allow (delete) if isSuperAdmin();
     * @deny (create, get, update, delete) if the user's UID does not match the userId (create) or is not an admin (update, delete).
     * @principle Enforces ownership of advertisement application data.
     */
    match /advertiserApplications/{applicationId} {
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow get: if isSuperAdmin() || resource.data.userId == request.auth.uid;
      allow list: if isSuperAdmin();
      allow update: if isSuperAdmin();
      allow delete: if isSuperAdmin();
    }

    /**
     * @description Controls access to API access logs.
     * @path /api_logs/{logId}
     * @allow (get) if isSuperAdmin().
     * @deny (create, update, delete) all writes are not permitted, only super admins have access.
     * @principle Restricts API log data access to admins.
     */
    match /api_logs/{logId} {
      allow create: if false;
      allow get: if isSuperAdmin();
      allow list: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (get, list) if true.
     * @deny (create, update, delete) all writes are not permitted.
     * @principle Allows public read access to leaderboard data.
     */
    match /leaderboards/topHolders {
      allow create: if false;
      allow get: if true;
      allow list: if true;
      allow update: if false;
      allow delete: if false;
    }
  }
}