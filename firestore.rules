/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for accounts and their associated data.
 * It provides role-based access control for administrative functions and public read access where appropriate.
 *
 * Data Structure:
 * - /accounts/{accountId}: User account data, where {accountId} is the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Transactions associated with a specific account.
 * - /admins/{adminId}: List of admin UIDs.
 * - /advertisements/{advertisementId}: Advertisements available for all users.
 * - /advertiserApplications/{applicationId}: Applications to become an advertiser.
 * - /api_logs/{logId}: Logs of API requests.
 * - /tenants/{tenantId}: Tenant projects integrated into the VSD network.
 * - /transactions/{transactionId}: A global log of all transactions.
 *
 * Key Security Decisions:
 * - Users can only read/write their own account data and transactions.
 * - Only admins can create, update, or delete accounts.
 * - Advertisements are publicly readable, but only advertisers can create, update, or delete them.
 * - Listing of other users is disallowed.
 * - The global /transactions collection is secured for admin-only access.
 *
 * Denormalization for Authorization:
 *  - The `accountId` field in the `Transaction` entity is used to enforce ownership.
 *  - The `advertiserId` field in the `Advertisement` entity is used to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants access to admins based on UID in the document ID.
     * @path /admins/{adminId}
     * @allow (read) User with matching UID can read.
     * @deny (read) User with non-matching UID cannot read.
     * @allow (create) Only admins can create new admin entries.
     * @deny (create) Non-admins cannot create new admin entries.
     * @principle Enforces role-based access control for administrative functions.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn() && isOwner(adminId);
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Grants access to accounts based on UID in the document ID.
     * @path /accounts/{accountId}
     * @allow (read) User with matching UID can read.
     * @deny (read) User with non-matching UID cannot read.
     * @allow (create) User can create their own account.
     * @deny (create) User cannot create an account with a different UID.
     * @principle Enforces document ownership for accounts.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Grants access to transactions based on the account ID.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (read) User with matching accountId can read transactions.
     * @deny (read) User with non-matching accountId cannot read transactions.
     * @allow (create) User can create transactions for their own account.
     * @deny (create) User cannot create transactions for other accounts.
     * @principle Enforces document ownership for transactions.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && request.resource.data.accountId == accountId;
      allow update: if isSignedIn() && isOwner(accountId);
      allow delete: if isSignedIn() && isOwner(accountId);
    }

    /**
     * @description Grants access to tenants.
     * @path /tenants/{tenantId}
     *  @allow (get, list) Public read access
     * @allow (create) Only authorized service accounts or admins.
     * @deny (create) Non-authorized users.
     */
    match /tenants/{tenantId} {
      allow get, list: if true;
      allow create: if false; // TODO: Implement proper auth for tenant creation.
      allow update: if false; // TODO: Implement proper auth for tenant updates.
      allow delete: if false; // TODO: Implement proper auth for tenant deletion.
    }

    /**
     * @description Grants access to all transactions (admin only).
     * @path /transactions/{transactionId}
     */
    match /transactions/{transactionId} {
      allow get: if false; // TODO: Implement admin check
      allow list: if false; // TODO: Implement admin check
      allow create: if false; // TODO: Implement admin check
      allow update: if false; // TODO: Implement admin check
      allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Grants access to advertisements.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) Public read access.
     * @allow (create) Only advertisers can create ads.
     *  @allow (create) Example: auth.uid === request.resource.data.advertiserId
     * @deny (create) Non-advertisers cannot create ads.
     * @principle Public read, owner-only write.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Grants access to advertiser applications.
     * @path /advertiserApplications/{applicationId}
     */
    match /advertiserApplications/{applicationId} {
      allow get: if false; // TODO: Implement admin check
      allow list: if false; // TODO: Implement admin check
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if false; // TODO: Implement admin check
      allow delete: if false; // TODO: Implement admin check
    }

    /**
     * @description Grants access to API logs.
     * @path /api_logs/{logId}
     */
    match /api_logs/{logId} {
      allow get: if false; // TODO: Implement admin check
      allow list: if false; // TODO: Implement admin check
      allow create: if false; // TODO: Implement proper authentication for API logging
      allow update: if false;
      allow delete: if false;
    }
  }
}