/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, focusing on user-ownership and administrative control where appropriate.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs.
 * - /accounts/{accountId}: Stores user account information.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for a user.
 * - /tenants/{tenantId}: Stores tenant project details.
 * - /transactions/{transactionId}: Stores a log of all transactions.
 * - /advertisements/{advertisementId}: Stores advertisement campaign data.
 * - /advertiserApplications/{applicationId}: Stores applications from users to become advertisers.
 * - /api_logs/{logId}: Stores API access logs.
 * - /leaderboards/topHolders: Stores a pre-computed list of top VSD token holders.
 *
 * Key Security Decisions:
 * - Listing of tenants is currently allowed for all users. This may need to be restricted in the future.
 * - Transactions are readable only by admins.
 * - The /leaderboards/topHolders document is publicly readable.
 *
 * Denormalization for Authorization:
 *  - No specific denormalization is required in this version. Future versions may denormalize admin roles or tenant membership directly onto documents for faster authorization.
 *
 * Structural Segregation:
 *  - Private user data (accounts, transactions) is stored under the /accounts/{accountId} path, while public data (leaderboards) is stored at the top level.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the owner of the existing resource.
     * @param {string} userId The user ID to compare against the authenticated user's ID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the 'admin' role.
     * @return {boolean} True if the user has the 'admin' role, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for the /admins collection.
     * @path /admins/{adminId}
     * @allow (create) - An admin can create their own record.
     * @deny (create) - A non-admin user cannot create an admin record.
     * @allow (get) - An admin can read their own record.
     * @deny (get) - A non-admin user cannot read an admin record.
     * @principle Enforces admin-only access to admin records.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId) || isAdmin();
      allow list: if false;
      allow create: if isAdmin() && request.resource.data.uid == adminId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /accounts collection.
     * @path /accounts/{accountId}
     * @allow (create) - A user can create their own account.
     * @deny (create) - A user cannot create another user's account.
     * @allow (get) - A user can read their own account.
     * @deny (get) - A user cannot read another user's account.
     * @principle Enforces user-ownership for account data.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);

        /**
         * @description Rules for the /accounts/{accountId}/transactions collection.
         * @path /accounts/{accountId}/transactions/{transactionId}
         * @allow (create) - A user can create a transaction in their own account.
         * @deny (create) - A user cannot create a transaction in another user's account.
         * @allow (get) - A user can read a transaction in their own account.
         * @deny (get) - A user cannot read a transaction in another user's account.
         * @principle Enforces user-ownership for transaction data.
         */
        match /transactions/{transactionId} {
          allow get: if isOwner(accountId);
          allow list: if isOwner(accountId);
          allow create: if isOwner(accountId);
          allow update: if false;
          allow delete: if false;
        }
    }

    /**
     * @description Rules for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (get) - Any user can read tenant data.
     * @allow (list) - Any user can list tenants.
     * @deny (create) - Only admins can create tenants.
     * @principle Allows public read access to tenant data but restricts creation to admins.
     */
    match /tenants/{tenantId} {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /transactions collection.
     * @path /transactions/{transactionId}
     * @deny (get) - Only admins can read a transaction.
     * @deny (list) - Only admins can list transactions.
     * @deny (create) - Only admins can create a transaction.
     * @principle Enforces admin-only access to global transaction logs.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /advertisements collection.
     * @path /advertisements/{advertisementId}
     * @allow (get) - Any user can read advertisement data.
     * @allow (list) - Any user can list advertisements.
     * @deny (create) - Only admins or the owning advertiser can create advertisements.
     * @principle Public read, owner/admin writes for advertisement management.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn(); // TODO: More restrictive create rule to only allow advertiser or admin
      allow update: if false;
      allow delete: if false;
    }

       /**
        * @description Rules for the /advertiserApplications collection.
        * @path /advertiserApplications/{applicationId}
        * @allow (create) - A user can create their own application.
        * @deny (get) - Only admins can view applications.
        * @principle Enforces user-ownership for application creation and admin-only access for reading.
        */
    match /advertiserApplications/{applicationId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
        allow update: if false;
        allow delete: if false;
    }

    /**
     * @description Rules for the /api_logs collection.
     * @path /api_logs/{logId}
     * @deny (get) - Only admins can read API logs.
     * @deny (list) - Only admins can list API logs.
     * @deny (create) - Only the server can create API logs.
     * @principle Enforces admin-only access to API logs.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false; // TODO: Secure server-only writes. Consider signed tokens or a dedicated service account.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the /leaderboards/topHolders document.
     * @path /leaderboards/topHolders
     * @allow (get) - Any user can read the leaderboard data.
     * @allow (list) - Listing is not applicable for a single document.
     * @deny (create) - No one can create the leaderboard data directly.
     * @principle Allows public read access to the leaderboard data.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if false;
      allow create: if false; // TODO: Secure server-only writes. Consider signed tokens or a dedicated service account.
      allow update: if false;
      allow delete: if false;
    }
  }
}