/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing open read access for certain collections
 * with strict ownership and role-based access control for sensitive data. The primary focus is on
 * protecting user accounts and financial transactions.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account information.  The `accountId` MUST match the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for each user.
 * - /tenants/{tenantId}: Stores tenant information.
 * - /transactions/{transactionId}: Stores a global log of all transactions. Restricted to admin roles.
 * - /advertisements/{advertisementId}: Stores advertisement data, publicly readable.
 * - /advertiserApplications/{applicationId}: Stores applications to become an advertiser.
 *
 * Key Security Decisions:
 * - User accounts are strictly owned by the corresponding Firebase Auth UID.
 * - Global transaction logs are restricted to admin roles only.
 * - Public read access is granted to the 'advertisements' collection, but write access is restricted to owners.
 * - Listing tenants and transactions is disallowed except when explicitly granted via admin roles.
 * - Denormalization: The `advertiserId` field exists on `advertisements` to avoid `get()` calls in rules.
 *
 * Structural Segregation:
 * - Public advertisements are stored in a top-level collection, separate from private user data.
 *
 * Denormalization for Authorization:
 * - Advertisements contain an `advertiserId` field to enable simple owner checks for writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows a user to read and write their own account data.
     * @path /accounts/{accountId}
     * @allow (create) - If the accountId matches the authenticated user's UID.
     * @allow (get, update, delete) - If the accountId matches the authenticated user's UID and the document exists.
     * @deny (create) - If the accountId does not match the authenticated user's UID.
     * @deny (get, update, delete) - If the accountId does not match the authenticated user's UID or the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(accountId);
      allow list: if false; // Listing accounts is not permitted

      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Allows a user to read and write their own transaction data.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) - If the accountId matches the authenticated user's UID.
     * @allow (get, update, delete, list) - If the accountId matches the authenticated user's UID and the document exists.
     * @deny (create, get, update, delete, list) - If the accountId does not match the authenticated user's UID or the document doesn't exist.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isOwner(accountId) && resource != null;
      allow delete: if isOwner(accountId) && resource != null;
    }

    /**
     * @description Restricts access to tenant data.  Currently no write access is granted.
     * @path /tenants/{tenantId}
     * @allow (get) - If true (public read).
     * @deny (create, update, delete, list) - Always deny.
     * @principle Enforces admin-only access for writes.
     */
    match /tenants/{tenantId} {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Restricts access to global transaction data to admin roles only.
     * @path /transactions/{transactionId}
     * @allow (get) - If the user has the 'admin' role.
     * @deny (create, update, delete, list) - Always deny.
     * @principle Enforces admin-only access.
     */
    match /transactions/{transactionId} {
      function isAdmin() {
        return request.auth.token.roles.hasAny(['admin']);
      }

      allow get: if isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to advertisements, but restricts writes to the advertiser.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) - Always allow (public read).
     * @allow (create) - If the advertiserId matches the authenticated user's UID.
     * @allow (update, delete) - If the advertiserId matches the authenticated user's UID and the document exists.
     * @deny (create) - If the advertiserId does not match the authenticated user's UID.
     * @deny (update, delete) - If the advertiserId does not match the authenticated user's UID or the document doesn't exist.
     * @principle Enforces document ownership for writes, allows public read access.
     */
    match /advertisements/{advertisementId} {
      function isOwner(advertiserId) {
        return request.auth.uid == advertiserId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      function isExistingOwner(advertiserId) {
        return isOwner(advertiserId) && resource != null;
      }

      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && isOwner(request.resource.data.advertiserId);
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

      /**
       * @description Restricts access to advertiser application data.
       * @path /advertiserApplications/{applicationId}
       * @allow (create) - If the userId matches the authenticated user's UID.
       * @allow (get) - If the userId matches the authenticated user's UID or the user has the 'admin' role.
       * @deny (list, update, delete) - Always deny.
       */
      match /advertiserApplications/{applicationId} {
        function isOwner(userId) {
          return request.auth.uid == userId;
        }

        function isSignedIn() {
          return request.auth != null;
        }

        function isAdmin() {
            return request.auth.token.roles.hasAny(['admin']);
        }

        allow get: if isOwner(request.resource.data.userId) || isAdmin();
        allow list: if false;
        allow create: if isSignedIn() && isOwner(request.resource.data.userId);
        allow update: if false;
        allow delete: if false;
      }
  }
}