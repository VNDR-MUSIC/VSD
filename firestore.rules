/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most collections,
 *              allowing users to only access and modify their own data.
 *              Administrative privileges are granted based on the presence of an 'admin' claim
 *              in the user's Firebase Authentication token.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores individual user account data, keyed by Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection storing transactions for a user.
 * - /admins/{adminId}: Stores a list of admin UIDs for role-based access control.
 * - /advertisements/{advertisementId}: Stores advertisement campaigns. Accessible to the owner (advertiserId) and admins.
 * - /advertiserApplications/{applicationId}: Stores applications from users to become advertisers. Accessible to the applicant (userId) and admins.
 * - /tenants/{tenantId}: Stores tenant information. Accessible only to admins.
 * - /transactions/{transactionId}: A global log of all transactions. Accessible only to admins.
 * - /api_logs/{logId}: Logs incoming API requests. Accessible only to admins.
 * - /leaderboards/topHolders: Publicly readable document with a pre-computed list of top VSD token holders.
 *
 * Key Security Decisions:
 * - User-owned data is stored under the /accounts/{accountId} path, enforcing a strict ownership model.
 * - Listing of user accounts (/accounts) is explicitly denied to prevent unauthorized data access.
 * - Admin privileges are determined by the 'admin' claim in the user's token, granting full read/write access.
 * - The /leaderboards/topHolders document is publicly readable to display the top token holders.
 * - All destructive operations (update, delete) require that the document exists.
 *
 * Denormalization for Authorization:
 * - The 'advertiserId' field in the /advertisements/{advertisementId} collection is used for ownership checks,
 *   avoiding the need to query the /accounts collection.
 * - The 'userId' field in the /advertiserApplications/{applicationId} collection is used to control who can
 *    access their applications.
 *
 * Structural Segregation:
 * - Private user data (account details, transactions) is stored under the /accounts/{accountId} path,
 *   while public data (leaderboards) is stored in a separate top-level collection.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows access to a specific user account.
     * @path /accounts/{accountId}
     * @allow (get, update, delete) if the user is the account owner (accountId == request.auth.uid).
     * @allow (create) if the accountId matches the user's UID (self-creation).
     * @deny (list) Always denied to prevent listing all accounts.
     * @deny (create, update, delete) if the user is not the account owner.
     * @principle Enforces document ownership, restricts account listing, and ensures self-creation.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(accountId) && resource.data.uid == accountId;
      allow delete: if isSignedIn() && isExistingOwner(accountId);
    }

    /**
     * @description Allows access to a user's transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete) if the user is the account owner (accountId == request.auth.uid).
     * @deny (create) if the transaction's accountId doesn't match the user's accountId.
     * @principle Enforces ownership for transaction data.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.accountId == accountId;
      allow update: if isSignedIn() && isExistingOwner(accountId);
      allow delete: if isSignedIn() && isExistingOwner(accountId);
    }

    /**
     * @description Allows access to admin documents.
     * @path /admins/{adminId}
     * @allow (get, list, create, update, delete) if the user is an admin (request.auth.token.admin == true).
     * @principle Enforces role-based access control for admin data.
     */
    match /admins/{adminId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to tenant documents.
     * @path /tenants/{tenantId}
     * @allow (get, list, create, update, delete) if the user is an admin (request.auth.token.admin == true).
     * @principle Enforces role-based access control for tenant management.
     */
    match /tenants/{tenantId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to global transaction logs.
     * @path /transactions/{transactionId}
     * @allow (get, list, create, update, delete) if the user is an admin (request.auth.token.admin == true).
     * @principle Enforces role-based access control for auditing.
     */
    match /transactions/{transactionId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to advertisement documents.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) if true.
     * @allow (create) if the user is signed in and the advertiserId matches the user's UID.
     * @allow (update, delete) if the user is the advertiser or an admin.
     * @deny (create, update, delete) if the user is not the advertiser or an admin.
     * @principle Allows public read access, enforces ownership for writes, and grants admin override.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && (isAdvertiser(resource.data.advertiserId) || isAdmin()) && resource != null;
      allow delete: if isSignedIn() && (isAdvertiser(resource.data.advertiserId) || isAdmin()) && resource != null;
    }

    /**
     * @description Allows access to advertiser application documents.
     * @path /advertiserApplications/{applicationId}
     * @allow (get, list) if the user is an admin or the applicant.
     * @allow (create) if the user is signed in and the userId matches the user's UID.
     * @allow (update, delete) if the user is an admin.
     * @deny (create) if the userId does not match the user's UID.
     * @principle Allows applicant and admin read access, enforces ownership for application creation, and grants admin override for updates.
     */
    match /advertiserApplications/{applicationId} {
      allow get, list: if isSignedIn() && (isAdmin() || isApplicant(resource.data.userId));
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows access to API log documents.
     * @path /api_logs/{logId}
     * @allow (get, list, create, update, delete) if the user is an admin (request.auth.token.admin == true).
     * @principle Enforces role-based access control for API monitoring.
     */
    match /api_logs/{logId} {
      allow get, list, create, update, delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (get, list) if true.
     * @deny (create, update, delete) Always denied.
     * @principle Provides public information, prevents unauthorized modifications.
     */
    match /leaderboards/topHolders {
      allow get, list: if true;
      allow create, update, delete: if false;
    }

    /**
     * @description Global rule to prevent access to any path not explicitly defined.
     * @path /{document=**}
     * @deny (get, list, create, update, delete) Always denied.
     * @principle Default-deny ensures only explicitly allowed paths are accessible.
     */
    match /{document=**} {
      allow get, list, create, update, delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.admin == true;
  }

  function isAdvertiser(advertiserId) {
    return request.auth.uid == advertiserId;
  }

  function isApplicant(userId) {
    return request.auth.uid == userId;
  }
}