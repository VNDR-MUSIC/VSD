/**
 * @file Firestore Security Rules
 * @core-philosophy This ruleset enforces a strict user-ownership model for user accounts and their associated data, with admin override capabilities.
 * @data-structure
 *   - /accounts/{accountId}: Stores individual user account data, keyed by Firebase Auth UID.
 *   - /accounts/{accountId}/transactions/{transactionId}: A subcollection storing all transactions for a specific user account.
 *   - /admins/{adminId}: Stores a list of admin UIDs for role-based access control.
 *   - /tenants/{tenantId}: Top-level collection for all partner tenants integrated with the VSD Network.
 *   - /transactions/{transactionId}: A global log of all transactions for administrative overview.
 *   - /advertisements/{advertisementId}: Stores all advertisement campaigns that users can interact with to earn VSD Lite.
 *   - /advertiserApplications/{applicationId}: Stores applications from users wishing to become advertisers.
 *   - /api_logs/{logId}: Stores a log of all incoming requests to protected VSD Network API endpoints for monitoring and debugging.
 *   - /leaderboards/topHolders: A single document containing a pre-computed list of the top VSD token holders.
 * @key-security-decisions
 *   - User accounts and transactions are strictly owned by the user.
 *   - Admins have full read and write access to all data.
 *   - Public read access is granted to the leaderboards collection.
 *   - Data validation is minimal to facilitate rapid prototyping. Focus is on authorization.
 *   - Listing of the /transactions collection is denied to prevent unauthorized access to sensitive data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants access to admin documents based on admin role.
     * @path /admins/{adminId}
     * @allow (get, list) if the user is an admin. (create, update, delete) if the user is an admin.
     * @deny (get, list) if the user is not an admin. (create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control for admin management.
     */
    match /admins/{adminId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to user account documents based on ownership.
     * @path /accounts/{accountId}
     * @allow (get, list) if the user is the owner or an admin. (create) if the user is creating their own account. (update, delete) if the user is the owner and the account exists.
     * @deny (get, list) if the user is not the owner or an admin. (create) if the user is not creating their own account. (update, delete) if the user is not the owner.
     * @principle Enforces document ownership for user accounts, with admin override.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId) || isAdmin();
      allow list: if isAdmin();
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId) || isAdmin();
      allow delete: if isExistingOwner(accountId) || isAdmin();
    }

    /**
     * @description Grants access to user transaction documents based on account ownership.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list) if the user is the owner of the account or an admin. (create, update, delete) if the user is the owner of the account or an admin.
     * @deny (get, list) if the user is not the owner or an admin. (create, update, delete) if the user is not the owner.
     * @principle Enforces document ownership for user transactions, with admin override.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId) || isAdmin();
      allow list: if isOwner(accountId) || isAdmin();
      allow create: if isOwner(accountId) || isAdmin();
      allow update: if isExistingOwner(accountId) || isAdmin();
      allow delete: if isExistingOwner(accountId) || isAdmin();
    }

    /**
     * @description Grants access to tenant documents based on admin role.
     * @path /tenants/{tenantId}
     * @allow (get, list) if the user is an admin. (create, update, delete) if the user is an admin.
     * @deny (get, list) if the user is not an admin. (create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control for tenant management.
     */
    match /tenants/{tenantId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to transaction documents based on admin role.
     * @path /transactions/{transactionId}
     * @allow (get) if the user is an admin. (create, update, delete) if the user is an admin.
     * @deny (list) to prevent unauthorized access to sensitive data. (get) if the user is not an admin. (create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control for global transactions, preventing listing.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants access to advertisement documents based on advertiser ownership.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) if true. (create) if the user is creating their own ad. (update, delete) if the user is the owner and the ad exists.
     * @deny (create) if the user is not creating their own ad. (update, delete) if the user is not the owner.
     * @principle Enforces document ownership for advertisements.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Grants access to advertiser application documents based on applicant ownership.
     * @path /advertiserApplications/{applicationId}
     * @allow (get, list) if the user is an admin or the owner. (create) if the user is creating their own application. (update, delete) if the user is an admin.
     * @deny (create) if the user is not creating their own application. (update, delete) if the user is not an admin.
     * @principle Enforces document ownership for advertiser applications, with admin override for modifications.
     */
    match /advertiserApplications/{applicationId} {
      allow get, list: if isAdmin() || request.resource.data.userId == request.auth.uid;
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update, delete: if isAdmin();
    }

    /**
     * @description Grants access to API log documents based on admin role.
     * @path /api_logs/{logId}
     * @allow (get, list) if the user is an admin. (create, update, delete) if the user is an admin.
     * @deny (get, list) if the user is not an admin. (create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control for API logs.
     */
    match /api_logs/{logId} {
      allow get, list: if isAdmin();
      allow create, update, delete: if isAdmin();
    }

    /**
     * @description Grants public read access to the leaderboard document.
     * @path /leaderboards/topHolders
     * @allow (get, list) if true. (create, update, delete) if the user is an admin.
     * @deny (create, update, delete) if the user is not an admin.
     */
    match /leaderboards/topHolders {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }

    // ---- Helper functions ----

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the account.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user has the admin role.
     * @return True if the user has the admin role, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }
  }
}