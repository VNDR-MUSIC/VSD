/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data and restricts access to sensitive collections.
 * Administrative access is required for managing tenants and viewing the global transaction log.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores individual user account data, keyed by Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: A subcollection storing all transactions for a specific user account.
 * - /tenants/{tenantId}: Top-level collection for all partner tenants integrated with the VSD Network.
 * - /transactions/{transactionId}: A global log of all transactions for administrative overview.
 * - /advertisements/{advertisementId}: Stores all advertisement campaigns that users can interact with to earn VSD Lite.
 *
 * Key Security Decisions:
 * - Users can only read and write their own account data.
 * - Listing all accounts is forbidden.
 * - Tenant and global transaction data are restricted to administrative roles.
 * - Public read access for advertisements with owner-only writes.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secures user account data, allowing only the owner to read and write.
     * @path /accounts/{accountId}
     * @allow (get, create, update, delete) if request.auth.uid == accountId
     * @deny (get, create, update, delete) if request.auth.uid != accountId
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false; // Listing accounts is forbidden.
      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures user transaction history. Only the account owner can read and write transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, create, update, delete) if request.auth.uid == accountId
     * @deny (get, create, update, delete) if request.auth.uid != accountId
     * @principle Restricts access to a user's own data tree.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secures tenant data, allowing only admins to read and write.
     * @path /tenants/{tenantId}
     * @allow (get, list, create, update, delete) if isAdmin()
     * @deny (get, list, create, update, delete) if !isAdmin()
     * @principle Restricts access to administrative roles.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Secures the global transaction log, allowing only admins to read.
     * @path /transactions/{transactionId}
     * @allow (get, list) if isAdmin()
     * @deny (create, update, delete)
     * @principle Restricts access to administrative roles.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows public read access to advertisements, but restricts writes to the owner.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) if true
     * @allow (create) if request.auth.uid == request.resource.data.id
     * @allow (update, delete) if resource != null && resource.data.id == request.auth.uid
     * @deny (create) if request.auth.uid != request.resource.data.id
     * @deny (update, delete) if resource == null || resource.data.id != request.auth.uid
     * @principle Allows public reads with owner-only writes for advertisements.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.id;
      allow update: if isExistingOwner(resource.data.id);
      allow delete: if isExistingOwner(resource.data.id);
    }


    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
        return isSignedIn() && (request.auth.token.email == "admin@example.com" || request.auth.token.email == "support@vndrmusic.com");
    }
  }
}