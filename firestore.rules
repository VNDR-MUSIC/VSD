/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for accounts and their associated transactions.
 *  Tenants are managed separately and transactions are publicly readable, but can only be created, updated, or deleted by authenticated users.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account data, where {accountId} is the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transactions for a specific account.
 * - /tenants/{tenantId}: Stores tenant data.
 * - /transactions/{transactionId}: Stores all transactions.
 *
 * Key Security Decisions:
 * - Users can only read, update, or delete their own account data and transactions.
 * - Listing all accounts is disallowed.
 * - Tenants are publicly readable, but creation, update, and deletion are restricted to authenticated users.
 * - Transactions are publicly readable, but creation, update, and deletion are restricted to authenticated users.
 *
 * Denormalization for Authorization:
 *  The `accountId` field within the `/transactions/{transactionId}` document is used to enforce user-based security on transactions.
 *  We are not validating the schema to allow for prototyping.
 *
 * Structural Segregation:
 *  Account data and global transaction logs are stored in separate collections to allow for different access control policies.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and resource is not null.
     */
    function isExistingOwner(userId) {
      return isOwner(userId);
    }

    /**
     * @description Defines a named set of transaction types
     */
    function isPermittedTransactionType(type) {
        return type in ["Mint (Stripe)", "Transfer", "Burn (Refund)", "API Spend", "Staking Reward", "Royalty Payout"];
    }

    /**
     * @description Defines a named set of statuses
     */
    function isPermittedStatus(status) {
      return status in ["Completed", "Pending", "Failed"];
    }

    /**
     * @description
     *  Rules for user accounts.
     * @path /accounts/{accountId}
     * @allow (create) - User with UID 'user_abc' can create their own account document if accountId == user_abc.
     * @allow (get,update,delete) - User with UID 'user_abc' can get their own account if accountId == user_abc.
     * @deny (create) - User with UID 'user_abc' cannot create an account with accountId == 'other_user'.
     * @deny (get,update,delete) - User with UID 'user_abc' cannot get/update/delete the account of 'other_user'.
     * @principle Enforces document ownership for all operations.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId) && request.auth.uid == accountId;
      allow update: if isOwner(accountId);
      allow delete: if isOwner(accountId);
    }

    /**
     * @description
     *  Rules for transactions under a specific user account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) - User 'user_abc' can create a transaction under their account (accountId == 'user_abc').
     * @allow (get,list,update,delete) - User 'user_abc' can read/modify transactions under their account.
     * @deny (create) - User 'user_abc' cannot create transactions under 'other_user' account.
     * @deny (get,list,update,delete) - User 'user_abc' cannot read/modify transactions under 'other_user' account.
     * @principle Enforces ownership for all transaction operations.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isOwner(accountId);
      allow delete: if isOwner(accountId);
    }

     /**
      * @description
      *  Rules for tenants. Tenants are publicly readable, but creation, update, and deletion are restricted to authenticated users.
      * @path /tenants/{tenantId}
      * @allow (get, list) - Any user can read tenant data.
      * @allow (create) - Authenticated users can create tenants.
      * @allow (update, delete) - Authenticated users can update/delete tenants.
      * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete tenants.
      * @principle Public read, owner-only writes for tenants.
      */
    match /tenants/{tenantId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }

    /**
     * @description
     *  Rules for transactions. Transactions are publicly readable, but creation, update, and deletion are restricted to authenticated users.
     * @path /transactions/{transactionId}
     * @allow (get, list) - Any user can read transaction data.
     * @allow (create) - Authenticated users can create transactions with a valid accountId.
     * @allow (update, delete) - Authenticated users can update/delete transactions if they exist and the transaction types and status is valid.
     * @deny (create, update, delete) - Unauthenticated users cannot create, update, or delete transactions.
     * @principle Public read, owner-only writes for transactions.
     */
    match /transactions/{transactionId} {
        allow get, list: if true;
        allow create: if isSignedIn();
        allow update: if isSignedIn();
        allow delete: if isSignedIn();
    }
  }
}