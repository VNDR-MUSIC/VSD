/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset implements a hybrid security model, balancing open access for certain public data with strict ownership and role-based access controls for sensitive user and administrative data.
 *
 * Data Structure:
 * - User data is stored under /accounts/{accountId}, ensuring private user-level access.
 * - Transaction data is nested under each account in /accounts/{accountId}/transactions/{transactionId}.
 * - Advertisements are stored in the top-level /advertisements/{advertisementId} collection, with owner-only write access.
 * - Advertiser Applications are stored in /advertiserApplications/{applicationId}, secured for admin review.
 * - Tenant and API logs are stored at the top-level in /tenants and /api_logs, respectively, secured for superAdmin access.
 * - A global /transactions collection provides an administrative overview of all transactions, secured for superAdmin access.
 * - A single /leaderboards/topHolders document is public-readable and contains pre-computed leaderboard data.
 * - Admin data is stored in /admins/{adminId} and secured for superAdmin write access.
 *
 * Key Security Decisions:
 * - Super Admin Override: A 'superAdmin' custom claim grants full read/write access to the entire database, enabling administrative functions.
 * - User Ownership: The /accounts/{accountId} path enforces strict user ownership, where only the authenticated user (or a superAdmin) can access their own account data and transactions.
 * - Public Read, Owner-Only Write: The /advertisements/{advertisementId} collection allows public read access, but only the advertisement owner can modify or delete their advertisements.
 * - SuperAdmin Only: Write access to the global /transactions collection and /tenants collection is restricted to super admins.
 * - Public Read: The /leaderboards/topHolders document is publicly readable to display the top token holders.
 *
 * Denormalization for Authorization:
 *  - Advertisements contain an `advertiserId` field to simplify ownership checks for write operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Super Admin full access
    match /{document=**} {
      allow read, write: if request.auth.token.superAdmin == true;
    }

    /**
     * @description Allows super admins to manage admin users.
     * @path /admins/{adminId}
     * @allow (create) If the user has the 'superAdmin' claim.
     * @deny (create) If the user does not have the 'superAdmin' claim.
     * @principle Enforces role-based access control for administrative functions.
     */
    match /admins/{adminId} {
      allow read, write: if request.auth.token.superAdmin == true;
    }

    /**
     * @description Enforces user-level access for account data.
     * @path /accounts/{accountId}
     * @allow (get, list) If the user's UID matches the account ID.
     * @allow (create) If the user's UID matches the account ID.
     * @allow (update) If the user's UID matches the account ID, and they are only updating their own document.
     * @allow (delete) If the user's UID matches the account ID.
     * @deny (get, list) If the user's UID does not match the account ID.
     * @deny (create) If the user's UID does not match the account ID.
     * @deny (update) If the user's UID does not match the account ID.
     * @deny (delete) If the user's UID does not match the account ID.
     * @principle Enforces document ownership for reads and writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Enforces user-level access for transaction data within an account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list) If the user's UID matches the account ID.
     * @allow (create) If the user's UID matches the account ID.
     * @allow (update) If the user's UID matches the account ID, and they are only updating their own document.
     * @allow (delete) If the user's UID matches the account ID.
     * @deny (get, list) If the user's UID does not match the account ID.
     * @deny (create) If the user's UID does not match the account ID.
     * @deny (update) If the user's UID does not match the account ID.
     * @deny (delete) If the user's UID does not match the account ID.
     * @principle Enforces document ownership for reads and writes.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Allows super admins to manage tenants.
     * @path /tenants/{tenantId}
     * @allow (create, update, delete) If the user has the 'superAdmin' claim.
     * @deny (create, update, delete) If the user does not have the 'superAdmin' claim.
     * @principle Enforces role-based access control for administrative functions.
     */
    match /tenants/{tenantId} {
      allow read: if request.auth.token.superAdmin == true;
      allow create: if request.auth.token.superAdmin == true;
      allow update: if request.auth.token.superAdmin == true;
      allow delete: if request.auth.token.superAdmin == true;
      allow list: if false;
    }

   /**
     * @description Allows super admins to manage all transactions.
     * @path /transactions/{transactionId}
     * @allow (create, update, delete) If the user has the 'superAdmin' claim.
     * @deny (create, update, delete) If the user does not have the 'superAdmin' claim.
     * @principle Enforces role-based access control for administrative functions.
     */
    match /transactions/{transactionId} {
      allow read: if request.auth.token.superAdmin == true;
      allow create: if request.auth.token.superAdmin == true;
      allow update: if request.auth.token.superAdmin == true;
      allow delete: if request.auth.token.superAdmin == true;
      allow list: if false;
    }

    /**
     * @description Allows public read access to advertisements, but restricts writes to the owner.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) to everyone.
     * @allow (create) if the advertiserId matches the user's UID.
     * @allow (update, delete) if the advertiserId in the existing document matches the user's UID.
     * @deny (create) if the advertiserId does not match the user's UID.
     * @deny (update, delete) if the advertiserId in the existing document does not match the user's UID.
     * @principle Implements public read, owner-only write access control.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.auth.uid == request.resource.data.advertiserId;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

   /**
     * @description Allows super admins to manage advertiser applications.
     * @path /advertiserApplications/{applicationId}
     * @allow (read, create, update, delete) if the user has the 'superAdmin' claim.
     * @deny (read, create, update, delete) if the user does not have the 'superAdmin' claim.
     * @principle Enforces role-based access control for administrative functions.
     */
    match /advertiserApplications/{applicationId} {
      allow read: if request.auth.token.superAdmin == true;
      allow list: if request.auth.token.superAdmin == true;
      allow create: if false;
      allow update: if request.auth.token.superAdmin == true;
      allow delete: if request.auth.token.superAdmin == true;
    }

    /**
     * @description Allows super admins to read and write API logs.
     * @path /api_logs/{logId}
     * @allow (create, update, delete) if the user has the 'superAdmin' claim.
     * @deny (create, update, delete) if the user does not have the 'superAdmin' claim.
     * @principle Enforces role-based access control for administrative functions.
     */
    match /api_logs/{logId} {
      allow read: if request.auth.token.superAdmin == true;
      allow list: if request.auth.token.superAdmin == true;
      allow create: if request.auth.token.superAdmin == true;
      allow update: if false;
      allow delete: if request.auth.token.superAdmin == true;
    }

    /**
     * @description Allows public read access to the leaderboard data.
     * @path /leaderboards/topHolders
     * @allow (get, list) to everyone.
     * @principle Provides public access to non-sensitive data.
     */
    match /leaderboards/topHolders {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }

  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}