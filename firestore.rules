/**
 * @file Firestore Security Rules
 * @version 2
 *
 * @description
 * This ruleset enforces a strict user-ownership model for user accounts and associated data,
 * while also providing role-based access control for administrative functions.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account data, with {accountId} matching the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection for user-specific transaction history.
 * - /tenants/{tenantId}: Stores tenant information.
 * - /transactions/{transactionId}: A global transaction log for admin access.
 * - /advertisements/{advertisementId}: Stores advertisements, owned by an advertiser.
 * - /advertiserApplications/{applicationId}: Stores applications to become an advertiser.
 * - /admins/{adminId}: Stores a list of admin UIDs for role-based access control.
 * - /api_logs/{logId}: Stores API access logs.
 * - /leaderboards/topHolders: Stores leaderboard information.
 *
 * Key Security Decisions:
 * - User accounts and transactions are strictly owned by the authenticated user.
 * - Global transactions and advertiser applications are restricted to admin access.
 * - Public read access granted to the leaderboard.
 * - Data shape is NOT validated.
 *
 * Denormalization for Authorization:
 * - Owner-only access is enforced by matching the {accountId} path segment with the authenticated user's UID.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user is the owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user is the existing owner of the resource.
     * @param {string} userId - The user ID to compare against the authenticated user's UID.
     * @return {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin, by checking if their UID exists in the /admins/{adminId} collection.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Grants access to the /admins/{adminId} collection.
     * @path /admins/{adminId}
     * @allow (read) Authenticated admin can read their own document.
     * @allow (create) Authenticated user can create their own admin document.
     * @allow (update) Authenticated admin can update their own document.
     * @allow (delete) Authenticated admin can delete their own document.
     * @deny (read) Non-authenticated user cannot read.
     * @deny (create) Non-authenticated user cannot create.
     * @deny (update) Non-authenticated user cannot update.
     * @deny (delete) Non-authenticated user cannot delete.
     * @principle Enforces document ownership for writes.
     */
    match /admins/{adminId} {
      allow get: if isOwner(adminId);
      allow list: if false;
      allow create: if isOwner(adminId);
      allow update: if isExistingOwner(adminId);
      allow delete: if isExistingOwner(adminId);
    }

    /**
     * @description Grants access to the /accounts/{accountId} collection, allowing users to manage their own accounts.
     * @path /accounts/{accountId}
     * @allow (get) Authenticated user can read their own account.
     * @allow (create) Authenticated user can create their own account.
     * @allow (update) Authenticated user can update their own account.
     * @allow (delete) Authenticated user can delete their own account.
     * @deny (get) Non-authenticated user cannot read.
     * @deny (create) Non-authenticated user cannot create.
     * @deny (update) Non-authenticated user cannot update.
     * @deny (delete) Non-authenticated user cannot delete.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Grants access to the /accounts/{accountId}/transactions/{transactionId} subcollection, allowing users to manage their own transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get) Authenticated user can read their own transaction.
     * @allow (create) Authenticated user can create their own transaction.
     * @allow (update) Authenticated user can update their own transaction.
     * @allow (delete) Authenticated user can delete their own transaction.
     * @deny (get) Non-authenticated user cannot read.
     * @deny (create) Non-authenticated user cannot create.
     * @deny (update) Non-authenticated user cannot update.
     * @deny (delete) Non-authenticated user cannot delete.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Grants access to the /tenants/{tenantId} collection, restricted to admins.
     * @path /tenants/{tenantId}
     * @allow (get) Authenticated admin can read a tenant.
     * @allow (create) Authenticated admin can create a tenant.
     * @allow (update) Authenticated admin can update a tenant.
     * @allow (delete) Authenticated admin can delete a tenant.
     * @deny (get) Non-admin user cannot read.
     * @deny (create) Non-admin user cannot create.
     * @deny (update) Non-admin user cannot update.
     * @deny (delete) Non-admin user cannot delete.
     * @principle Restricts access to admin role.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to the /transactions/{transactionId} collection, restricted to admins.
     * @path /transactions/{transactionId}
     * @allow (get) Authenticated admin can read a transaction.
     * @allow (create) Authenticated admin can create a transaction.
     * @allow (update) Authenticated admin can update a transaction.
     * @allow (delete) Authenticated admin can delete a transaction.
     * @deny (get) Non-admin user cannot read.
     * @deny (create) Non-admin user cannot create.
     * @deny (update) Non-admin user cannot update.
     * @deny (delete) Non-admin user cannot delete.
     * @principle Restricts access to admin role.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to the /advertisements/{advertisementId} collection, allowing advertisers to manage their own ads.
     * @path /advertisements/{advertisementId}
     * @allow (get) Authenticated advertiser can read their own ad.
     * @allow (create) Authenticated advertiser can create their own ad.
     * @allow (update) Authenticated advertiser can update their own ad.
     * @allow (delete) Authenticated advertiser can delete their own ad.
     * @deny (get) Non-authenticated user cannot read.
     * @deny (create) Non-authenticated user cannot create.
     * @deny (update) Non-authenticated user cannot update.
     * @deny (delete) Non-authenticated user cannot delete.
     * @principle Enforces document ownership for writes.
     */
    match /advertisements/{advertisementId} {
        allow get: if isSignedIn();
        allow list: if isSignedIn();
        allow create: if isSignedIn();
        allow update: if isExistingOwner(resource.data.advertiserId);
        allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Grants access to the /advertiserApplications/{applicationId} collection, restricted to admins.
     * @path /advertiserApplications/{applicationId}
     * @allow (get) Authenticated admin can read an application.
     * @allow (create) Authenticated admin can create an application.
     * @allow (update) Authenticated admin can update an application.
     * @allow (delete) Authenticated admin can delete an application.
     * @deny (get) Non-admin user cannot read.
     * @deny (create) Non-admin user cannot create.
     * @deny (update) Non-admin user cannot update.
     * @deny (delete) Non-admin user cannot delete.
     * @principle Restricts access to admin role.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to the /api_logs/{logId} collection, restricted to admins.
     * @path /api_logs/{logId}
     * @allow (get) Authenticated admin can read a log.
     * @allow (create) Authenticated admin can create a log.
     * @allow (update) Authenticated admin can update a log.
     * @allow (delete) Authenticated admin can delete a log.
     * @deny (get) Non-admin user cannot read.
     * @deny (create) Non-admin user cannot create.
     * @deny (update) Non-admin user cannot update.
     * @deny (delete) Non-admin user cannot delete.
     * @principle Restricts access to admin role.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants public read access to the /leaderboards/topHolders document.
     * @path /leaderboards/topHolders
     * @allow (get) Any user can read the leaderboard.
     * @allow (list) Any user can list the leaderboard.
     * @deny (create) No one can create the leaderboard.
     * @deny (update) No one can update the leaderboard.
     * @deny (delete) No one can delete the leaderboard.
     * @principle Allows public read access to leaderboard data.
     */
    match /leaderboards/topHolders {
        allow get: if true;
        allow list: if false;
        allow create: if false;
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }
  }
}