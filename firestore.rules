/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, primarily using an admin role.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs.
 * - /accounts/{accountId}: Stores user account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transactions for a specific account.
 * - /tenants/{tenantId}: Stores partner tenant data.
 * - /transactions/{transactionId}: Stores a global log of all transactions.
 * - /advertisements/{advertisementId}: Stores advertisement campaign data.
 * - /advertiserApplications/{applicationId}: Stores applications from users wishing to become advertisers.
 * - /api_logs/{logId}: Stores API access logs.
 * - /leaderboards/topHolders: Stores leaderboard data (publicly readable).
 *
 * Key Security Decisions:
 * - Admins have full read and write access to all collections except leaderboards.
 * - Only admins can manage tenants, transactions, advertiser applications and api logs.
 * - Users can only manage their own accounts and transactions within their account.
 * - Leaderboard data is publicly readable.
 * - Denormalization is not explicitly used in these rules, but should be considered for performance, especially for access control decisions on deeply nested data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage the list of admin users.
     * @path /admins/{adminId}
     * @allow (create) request.auth.uid exists and request.auth.uid is an admin
     * @deny (create) request.auth.uid does not exist
     * @principle Enforces role-based access control for managing admins.
     */
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows users to read and write their own account data. Admins can also manage all accounts.
     * @path /accounts/{accountId}
     * @allow (create) request.auth.uid matches the accountId
     * @deny (update) request.auth.uid does not match the accountId and is not an admin
     * @principle Enforces document ownership and role-based access control for account management.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn();
      allow list: if false;
      allow create: if isSelfCreate(accountId);
      allow update: if isExistingOwner(accountId) || isAdmin();
      allow delete: if isExistingOwner(accountId) || isAdmin();
    }

    /**
     * @description Allows users to manage their own transactions. Admins can manage all transactions.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) request.auth.uid matches the accountId
     * @deny (delete) request.auth.uid does not match the accountId and is not an admin
     * @principle Enforces ownership and role-based access control for transaction management.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list: if isOwner(accountId) || isAdmin();
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId) || isAdmin();
      allow delete: if isExistingOwner(accountId) || isAdmin();
    }

    /**
     * @description Allows admins to manage tenants.
     * @path /tenants/{tenantId}
     * @allow (create) request.auth.uid is an admin
     * @deny (delete) request.auth.uid is not an admin
     * @principle Enforces role-based access control for tenant management.
     */
    match /tenants/{tenantId} {
      allow read, write: if isAdmin();
    }

     /**
      * @description Allows admins to view all transactions
      * @path /transactions/{transactionId}
      * @allow (get) request.auth.uid is an admin
      * @deny (create) request.auth.uid is not an admin
      * @principle Enforces role-based access control for viewing all transactions.
      */
    match /transactions/{transactionId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows admins to manage advertisements.
     * @path /advertisements/{advertisementId}
     * @allow (create) request.auth.uid is an admin
     * @deny (delete) request.auth.uid is not an admin
     * @principle Enforces role-based access control for advertisement management.
     */
    match /advertisements/{advertisementId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows admins to manage advertiser applications.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) request.auth.uid is an admin
     * @deny (delete) request.auth.uid is not an admin
     * @principle Enforces role-based access control for managing advertiser applications.
     */
    match /advertiserApplications/{applicationId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows admins to manage API logs.
     * @path /api_logs/{logId}
     * @allow (create) request.auth.uid is an admin
     * @deny (delete) request.auth.uid is not an admin
     * @principle Enforces role-based access control for managing API logs.
     */
    match /api_logs/{logId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Allows anyone to read the leaderboard data.
     * @path /leaderboards/topHolders
     * @allow (get) any authenticated or unauthenticated user
     * @deny (create) no one can create this.
     * @principle Allows public read access to leaderboard data.
     */
    match /leaderboards/{leaderboardId} {
        allow get, list: if true;
        allow create, update, delete: if false;
    }

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isSelfCreate(accountId) {
      return request.auth.uid == accountId;
    }

    function isAdmin() {
        return isSignedIn() && get(/databases/$(database)/documents/admins/$(request.auth.uid)).data.uid == request.auth.uid;
    }
  }
}