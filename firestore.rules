/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing user-owned data with
 * administrative oversight. User data is primarily accessible to the
 * authenticated user. Administrative collections are strictly controlled and
 * often read-only for public consumption (e.g., Leaderboards).
 *
 * Data Structure:
 * - /accounts/{accountId}: User accounts, secured by ownership.
 * - /accounts/{accountId}/transactions/{transactionId}: User-specific transaction history.
 * - /admins/{adminId}: List of admin UIDs, secured by role.
 * - /tenants/{tenantId}: Partner projects, secured for admin management.
 * - /transactions/{transactionId}: Global transaction log, admin-only access.
 * - /advertisements/{advertisementId}: Advertisement campaigns, owner-based writes, public reads.
 * - /advertiserApplications/{applicationId}: Applications to become advertisers, admin review.
 * - /api_logs/{logId}: API access logs, secured for internal monitoring.
 * - /leaderboards/topHolders: Public leaderboard data.
 *
 * Key Security Decisions:
 * - No user listing is allowed for accounts or transactions.
 * - Leaderboard data is publicly readable but writable only by a trusted process.
 * - API logs are append-only.
 *
 * Denormalization for Authorization:
 * - Advertisement documents denormalize the `advertiserId` to enable owner-based write rules.
 *
 * Structural Segregation:
 * - Private user data (accounts, transactions) is stored under the /accounts/{accountId} path,
 *   separate from public or admin-managed collections.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Restricts access to admin profiles to only those with a matching UID.
     * @path /admins/{adminId}
     * @allow (read, write) if request.auth.uid == adminId
     * @deny (read, write) if request.auth.uid != adminId
     * @principle Enforces document ownership for admin profiles.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn() && isOwner(adminId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(adminId);
      allow update: if isSignedIn() && isExistingOwner(adminId);
      allow delete: if isSignedIn() && isExistingOwner(adminId);
    }

    /**
     * @description Restricts access to user account data to the owner of the account.
     * @path /accounts/{accountId}
     * @allow (read, write) if request.auth.uid == accountId
     * @deny (read, write) if request.auth.uid != accountId
     * @principle Enforces document ownership for user accounts.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isSignedIn() && isOwner(accountId) && resource.data.uid == accountId;
      allow delete: if isSignedIn() && isExistingOwner(accountId);

       /**
        * @description Restricts access to user-specific transaction history to the owner of the account.
        * @path /accounts/{accountId}/transactions/{transactionId}
        * @allow (read, write) if request.auth.uid == accountId
        * @deny (read, write) if request.auth.uid != accountId
        * @principle Enforces document ownership for user-specific transaction history.
        */
      match /transactions/{transactionId} {
        allow get: if isSignedIn() && isOwner(accountId);
        allow list: if isSignedIn() && isOwner(accountId);
        allow create: if isSignedIn() && isOwner(accountId);
        allow update: if isSignedIn() && isExistingOwner(accountId);
        allow delete: if isSignedIn() && isExistingOwner(accountId);
      }
    }

    /**
     * @description Restricts access to tenants collection for administrative control.
     * @path /tenants/{tenantId}
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Enforces admin-only access for tenant management.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Restricts access to global transactions collection for administrative oversight.
     * @path /transactions/{transactionId}
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Enforces admin-only access for global transaction logs.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Allows public read access to advertisements, but restricts writes to the owner (advertiser).
     * @path /advertisements/{advertisementId}
     * @allow (read) public
     * @allow (write) if isOwner(resource.data.advertiserId)
     * @deny (write) if !isOwner(resource.data.advertiserId)
     * @principle Implements public read with owner-only writes for advertisements.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Restricts access to advertiser applications for administrative review.
     * @path /advertiserApplications/{applicationId}
     * @allow (read, write) if isAdmin()
     * @deny (read, write) if !isAdmin()
     * @principle Enforces admin-only access for reviewing advertiser applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false; // Advertiser applications should only be created via backend to prevent spam
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

   /**
    * @description Restricts access to API logs for internal monitoring and debugging.  Allows only creation.
    * @path /api_logs/{logId}
    * @allow (create) if isSignedIn()
    * @deny (read, write)
    * @principle Restricts read access to API logs, allowing only append-only logging.
    */
    match /api_logs/{logId} {
      allow get: if false;
      allow list: if false;
      allow create: if isSignedIn(); // API logs should only be created via backend
      allow update: if false;
      allow delete: if false;
    }
    /**
     * @description Allows public read access to the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (read) public
     * @deny (write)
     * @principle Provides public access to leaderboard data.
     */
    match /leaderboards/{leaderboardId} {
        allow get: if true;
        allow list: if false;
        allow create: if false; // Leaderboard documents should only be created via backend
        allow update: if false;
        allow delete: if false;
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }

  function isAdmin() {
    return request.auth.token.admin == true;
  }
}