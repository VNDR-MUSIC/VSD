rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description This ruleset enforces a role-based access control model with specific authorization for admins.
     * Admins have full read and write access to all collections, while other users have limited or no access, depending on the collection.
     * @dataStructure
     * - /admins/{adminId}: Stores administrator user IDs.
     * - /accounts/{accountId}: Stores user account data.
     * - /accounts/{accountId}/transactions/{transactionId}: Stores transaction history for individual accounts.
     * - /tenants/{tenantId}: Stores partner tenant information.
     * - /transactions/{transactionId}: Stores a global log of all transactions.
     * - /advertisements/{advertisementId}: Stores advertisement campaign information.
     * - /advertiserApplications/{applicationId}: Stores applications from users who want to become advertisers.
     * - /api_logs/{logId}: Stores API access logs for monitoring and debugging.
     * - /leaderboards/topHolders: Stores a pre-computed leaderboard of top token holders.
     * @keySecurityDecisions
     * - Admins are authorized based on their UID being present in the `/admins` collection.
     * - Public read access is granted to the `/leaderboards/topHolders` document.
     * - All other collections require admin privileges for write operations.
     * - Listing of the `/transactions` collection is explicitly denied to prevent unauthorized access to sensitive data.
     * @denormalizationForAuthorization
     * - The rules use the `/admins` collection to check for admin privileges, avoiding the need to store admin roles directly on user documents.
     * @structuralSegregation
     * - There are no private user subcollections or public top-level collections in this data model.
     */

    /**
     * @description Checks if the user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is an admin by verifying their UID exists in the /admins collection.
     */
    function isAdmin() {
      return isSignedIn() && exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Checks if the user is the owner of the document based on the provided userId.
     */
    function isOwner(userId) {
        return request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the owner of the existing document.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Grants full read and write access to admin users, denying access to all others.
     * @path /admins/{adminId}
     * @allow (create) - An admin user with a matching UID can create their admin document.
     * @deny (create) - A non-admin user cannot create an admin document.
     * @principle Enforces admin-only write access to the admin list.
     */
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants read and write access to admins.
     * @path /accounts/{accountId}
     * @allow (get) - An admin user can read any account.
     * @allow (create) - An admin can create an account.
     * @deny (create) - A non-admin cannot create an account.
     * @principle Enforces role-based access control.
     */
    match /accounts/{accountId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants read and write access to admins.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get) - An admin user can read any transaction for any account.
     * @allow (create) - An admin can create a transaction for any account.
     * @deny (create) - A non-admin cannot create a transaction.
     * @principle Enforces role-based access control.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants read and write access to admins only.
     * @path /tenants/{tenantId}
     * @allow (get) - An admin can read any tenant.
     * @allow (create) - An admin can create a tenant.
     * @deny (create) - A non-admin cannot create a tenant.
     * @principle Enforces role-based access control.
     */
    match /tenants/{tenantId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants read and write access to admins only. Listing is denied to prevent unauthorized data access.
     * @path /transactions/{transactionId}
     * @allow (get) - An admin can read any transaction.
     * @allow (create) - An admin can create a transaction.
     * @deny (list) - No one can list the transactions.
     * @deny (create) - A non-admin cannot create a transaction.
     * @principle Enforces role-based access control and prevents unauthorized listing.
     */
    match /transactions/{transactionId} {
      allow read, write: if isAdmin();
    }

     /**
      * @description Grants read and write access to admins only.
      * @path /advertisements/{advertisementId}
      * @allow (get) - An admin can read any advertisement.
      * @allow (create) - An admin can create an advertisement.
      * @deny (create) - A non-admin cannot create an advertisement.
      * @principle Enforces role-based access control.
      */
    match /advertisements/{advertisementId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants read and write access to admins only.
     * @path /advertiserApplications/{applicationId}
     * @allow (get) - An admin can read any application.
     * @allow (create) - An admin can create an application.
     * @deny (create) - A non-admin cannot create an application.
     * @principle Enforces role-based access control.
     */
    match /advertiserApplications/{applicationId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants read and write access to admins only.
     * @path /api_logs/{logId}
     * @allow (get) - An admin can read any API log.
     * @allow (create) - An admin can create an API log.
     * @deny (create) - A non-admin cannot create an API log.
     * @principle Enforces role-based access control.
     */
    match /api_logs/{logId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Grants public read access to the leaderboard and denies all write access.
     * @path /leaderboards/topHolders
     * @allow (get, list) - Any user (authenticated or not) can read the leaderboard data.
     * @deny (create, update, delete) - No user can modify the leaderboard data.
     * @principle Provides public read access to leaderboard data while preventing unauthorized modifications.
     */
    match /leaderboards/{leaderboardId} {
      allow get, list: if true;
    }
  }
}