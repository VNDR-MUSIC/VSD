/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model, primarily focused on administrative access.
 *
 * Data Structure:
 * - Top-level collections are generally secured for admin-only access.
 * - User-specific subcollections (e.g., transactions under accounts) are secured for owner-only access.
 *
 * Key Security Decisions:
 * - Read and write access to most collections are restricted to superAdmins.
 * - Public read access is granted to the 'leaderboards/topHolders' document.
 *
 * Denormalization for Authorization:
 * - The `admins` collection stores a list of admin UIDs for role-based access control.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by a superAdmin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Role-based access control.
     */
    function isSuperAdmin() {
      return request.auth != null && request.auth.token.superAdmin == true
             || request.auth.uid == 'eiMBgcJ3KhWGesl8J78oYFHiquy2';
    }

    /**
     * @description Checks if the request is made by an admin (currently same as superAdmin).
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Role-based access control.
     */
    function isAdmin() {
      return isSuperAdmin();
    }

    /**
     * @description Checks if the user ID matches the requested ID.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership-based access control.
     */
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user ID matches the requested ID and that the resource exists.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Ownership-based access control and existence check.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }


    /**
     * @description Root match to deny all access if no other rules match.
     * @path /
     * @allow None
     * @deny Any read or write operation.
     * @principle Default deny-all policy.
     */
    match /{document=**} {
      allow read, write: if false;
    }

    /**
     * @description Manages the list of admin users.
     * @path /admins/{adminId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can manage the list of admins.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores individual user account data.
     * @path /accounts/{accountId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can access account data.
     */
    match /accounts/{accountId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores all transactions for a specific user account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow get: if isOwner(accountId) || isAdmin();
     * @allow list: if isOwner(accountId) || isAdmin();
     * @allow create: if isAdmin(); // Only admins can create transactions
     * @allow update: if false; // Transactions should be immutable
     * @allow delete: if false; // Transactions should not be deleted
     * @deny Any unauthorized access to transactions.
     * @principle Transactions are generally admin-managed, but readable by account owner.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId) || isAdmin();
      allow list: if isOwner(accountId) || isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Stores tenant information for integrated partners.
     * @path /tenants/{tenantId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can manage tenants.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores a global log of all transactions.
     * @path /transactions/{transactionId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can access the global transaction log.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores advertisement campaign data.
     * @path /advertisements/{advertisementId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can manage advertisements.
     */
    match /advertisements/{advertisementId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores applications from users wishing to become advertisers.
     * @path /advertiserApplications/{applicationId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can manage advertiser applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores logs of incoming API requests.
     * @path /api_logs/{logId}
     * @allow (read, write) If the user is an admin.
     * @deny (read, write) If the user is not an admin.
     * @principle Only admins can access the API logs.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Stores API keys for integrated partners.
      * @path /api_keys/{keyId}
      * @allow read: if isAdmin();
      * @allow write: if isAdmin();
      * @deny Any non-admin access.
      * @principle Only admins can manage API keys.
      */
    match /api_keys/{keyId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Stores data related to VSD integrations.
     * @path /vsd_integrations/{integrationId}
     * @allow read: if isAdmin();
     * @allow write: if isAdmin();
     * @deny Any non-admin access.
     * @principle Only admins can manage VSD integrations.
     */
    match /vsd_integrations/{integrationId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Stores logs of VSD API usage.
     * @path /vsd_api_logs/{logId}
     * @allow read: if isAdmin();
     * @allow write: if isAdmin();
     * @deny Any non-admin access.
     * @principle Only admins can access VSD API logs.
     */
    match /vsd_api_logs/{logId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Stores admin notifications related to VSD.
     * @path /vsd_admin_notifications/{notificationId}
     * @allow read: if isAdmin();
     * @allow write: if isAdmin();
     * @deny Any non-admin access.
     * @principle Only admins can manage VSD admin notifications.
     */
    match /vsd_admin_notifications/{notificationId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Stores token distributions data.
     * @path /token_distributions/{distributionId}
     * @allow read: if isAdmin();
     * @allow write: if isAdmin();
     * @deny Any non-admin access.
     * @principle Only admins can manage token distributions.
     */
    match /token_distributions/{distributionId} {
        allow get: if isAdmin();
        allow list: if isAdmin();
        allow create: if isAdmin();
        allow update: if isAdmin();
        allow delete: if isAdmin();
    }

    /**
     * @description Contains a pre-computed list of the top VSD token holders.
     * @path /leaderboards/topHolders
     * @allow get, list: if true;
     * @deny create, update, delete: if false;
     * @principle Public read access for leaderboard data, no write access.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

  }
}