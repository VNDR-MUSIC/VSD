/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user accounts and their associated data,
 * while providing public read access to advertisements. Administrative access is granted through
 * a designated "admins" collection. API access logs are restricted to server-side writes only.
 *
 * Data Structure:
 * - /admins/{adminId}: List of admin users.
 * - /accounts/{accountId}: User account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Transaction history for each account.
 * - /tenants/{tenantId}: Partner tenant information.
 * - /transactions/{transactionId}: Global transaction log (admin-only).
 * - /advertisements/{advertisementId}: Publicly readable advertisements.
 * - /advertiserApplications/{applicationId}: Advertiser applications for admin review.
 * - /api_logs/{logId}: API access logs (server-side writes only).
 *
 * Key Security Decisions:
 * - User data is strictly controlled by the owning user.
 * - Global transaction logs are secured for admin-only access.
 * - Advertisements are publicly readable but writable only by their owners.
 * - API logs are write-only for backend processes.
 * - Listing all users is disallowed; access is only permitted to individual accounts.
 *
 * Denormalization for Authorization:
 * To avoid `get()` calls in rules, critical authorization data (like ownership) should be
 * denormalized directly onto documents.  For example, the `Advertisement` entity requires an
 * `advertiserId` field to enable owner-only updates.
 *
 * Structural Segregation:
 * Private user data (e.g., transactions) is stored in user-specific subcollections, separate from
 * public data like advertisements. This improves security and performance for listing operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Authentication is required for certain operations.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Enforces ownership for data access.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the current user is an existing owner of the resource.
     * @path N/A
     * @allow N/A
     * @deny N/A
     * @principle Checks for both ownership and resource existence before destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user is an admin.
     * @path N/A
     * @allow N/A
     * @deny N/A
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Rules for the admins collection.
     * @path /admins/{adminId}
     * @allow (create) User with matching UID becomes an admin.
     * @deny (create) User attempts to create an admin entry with a mismatched UID.
     * @principle Enforces that only a user can create their own admin record.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn() && isOwner(adminId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(adminId);
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the accounts collection.
     * @path /accounts/{accountId}
     * @allow (create) User creates their own account.
     * @deny (create) User attempts to create an account for another user.
     * @principle Enforces that only a user can create their own account.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && resource.data.uid == request.resource.data.uid;
      allow delete: if false;
    }

    /**
     * @description Rules for the transactions subcollection under accounts.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (list) Owner can list their own transactions
     * @deny (list) User attempts to list transactions for another user.
     * @principle Enforces that only the account owner can access their transaction data.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.accountId == accountId;
      allow update: if isExistingOwner(accountId) && resource.data.accountId == request.resource.data.accountId;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Rules for the tenants collection.
     * @path /tenants/{tenantId}
     * @allow (read) Any authenticated user can read tenant information.
     * @deny (write) Only admins can create, update, or delete tenants.
     * @principle Restricts tenant management to administrators.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isAdmin();
      allow update: if isAdmin() && resource != null;
      allow delete: if isAdmin() && resource != null;
    }

    /**
     * @description Rules for the global transactions collection.
     * @path /transactions/{transactionId}
     * @allow (read) Only admins can read transaction logs.
     * @deny (write) No direct client writes are allowed; these should be handled server-side.
     * @principle Restricts access to sensitive transaction logs to administrators.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if false; // Transactions should be created server-side.
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Rules for the advertisements collection.
     * @path /advertisements/{advertisementId}
     * @allow (read) Public read access to advertisements.
     * @deny (write) Only the owner (advertiser) can create, update, or delete their advertisements.
     * @principle Provides public read access while enforcing ownership for writes.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId) && resource.data.advertiserId == request.resource.data.advertiserId;
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Rules for the advertiserApplications collection.
     * @path /advertiserApplications/{applicationId}
     * @allow (read) Only admins can read advertiser applications.
     * @allow (write) Any signed in user can create an application
     * @deny (update, delete) Applications can only be managed through review process
     * @principle Restricts access to the advertiser applications to administrators for review.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() && resource != null;
      allow delete: if false;
    }

     /**
      * @description Rules for the API logs collection.
      * @path /api_logs/{logId}
      * @allow (create) Only server-side processes can write API logs.
      * @deny (read, update, delete) No client-side access to API logs.
      * @principle Restricts API log access to server-side processes for security and auditing.
      */
    match /api_logs/{logId} {
      allow get: if false;
      allow list: if false;
      allow create: if true; // Only server can create these logs
      allow update: if false;
      allow delete: if false;
    }
  }
}