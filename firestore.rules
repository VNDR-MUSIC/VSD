rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Grants admin read/write access to admin documents.
     * @path /admins/{adminId}
     * @allow (read, write) if request.auth.uid is an admin.
     * @deny (read, write) if request.auth.uid is not an admin.
     * @principle Enforces role-based access control for admin data.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants user read/write access to their own account data.
     * @path /accounts/{accountId}
     * @allow (get, list) if request.auth.uid == accountId.
     * @allow (create, update, delete) if request.auth.uid == accountId.
     * @deny (read, write) if request.auth.uid != accountId.
     * @principle Enforces document ownership for user accounts.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId) && request.auth.uid == accountId;
      allow update: if isOwner(accountId) && request.auth.uid == accountId;
      allow delete: if isOwner(accountId) && request.auth.uid == accountId;

      /**
       * @description Grants user read/write access to their own transaction history.
       * @path /accounts/{accountId}/transactions/{transactionId}
       *  @allow (get, list) if request.auth.uid == accountId.
       *  @allow (create, update, delete) if request.auth.uid == accountId.
       *  @deny (read, write) if request.auth.uid != accountId.
       * @principle Enforces document ownership for transactions.
       */
      match /accounts/{accountId}/transactions/{transactionId} {
        allow get: if isOwner(accountId);
        allow list: if isOwner(accountId);
        allow create: if isOwner(accountId);
        allow update: if isOwner(accountId);
        allow delete: if isOwner(accountId);
      }
    }

    /**
     * @description Grants admin read/write access to tenant data.
     * @path /tenants/{tenantId}
     * @allow (read, write) if request.auth.uid is an admin.
     * @deny (read, write) if request.auth.uid is not an admin.
     * @principle Enforces role-based access control for tenant management.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants admin read/write access to global transaction logs.
     * @path /transactions/{transactionId}
     * @allow (read, write) if request.auth.uid is an admin.
     * @deny (read, write) if request.auth.uid is not an admin.
     * @principle Enforces role-based access control for auditing.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to advertisements, but restricts writes to the advertiser.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) public access.
     * @allow (create) if request.auth.uid == request.resource.data.advertiserId.
     * @allow (update, delete) if request.auth.uid == resource.data.advertiserId.
     * @deny (create, update, delete) if request.auth.uid != resource.data.advertiserId.
     * @principle Public read with owner-only writes, enforced by the 'advertiserId' field.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && request.resource.data.advertiserId == getSelf().data.advertiserId;
      allow delete: if isSignedIn() && request.resource.data.advertiserId == getSelf().data.advertiserId;
    }

    /**
     * @description Allows anyone to create an advertiser application, but restricts read/write access to admins.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) any authenticated user.
     * @allow (read, write) if request.auth.uid is an admin.
     * @deny (read, write) if request.auth.uid is not an admin.
     * @principle Open application submission, but admin-only management.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

   /**
    * @description Grants admin read/write access to API logs.
    * @path /api_logs/{logId}
    * @allow (read, write) if request.auth.uid is an admin.
    * @deny (read, write) if request.auth.uid is not an admin.
    * @principle Enforces role-based access control for tenant management.
    */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (get, list) public access.
     * @deny (create, update, delete) all access.
     * @principle Allows public read access, but no write access.
     */
    match /leaderboards/{leaderboardId} {
        allow get: if true;
        allow list: if true;
        allow create: if false;
        allow update: if false;
        allow delete: if false;
    }
  }

  // --- Helper Functions ---

  /**
   * @description Checks if the user is signed in.
   * @return True if the user is signed in, false otherwise.
   */
  function isSignedIn() {
    return request.auth != null;
  }

  /**
   * @description Checks if the request is made by the owner of the document.
   * @param {string} userId - The ID of the user who should own the document.
   * @return True if the request is made by the owner, false otherwise.
   */
  function isOwner(userId) {
    return request.auth.uid == userId;
  }

    /**
   * @description Gets the current document being accessed
   * @return The document
   */
  function getSelf() {
    return get(/databases/$(database)/documents/advertisements/$(advertisementId));
  }

  /**
   * @description Checks if the user is an administrator.
   * @return True if the user is an administrator, false otherwise.
   */
  function isAdmin() {
    return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
  }
}