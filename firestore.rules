/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for accounts and their associated transactions.
 * Global transaction logs and API logs are restricted to admins only.
 * Public read access is granted for advertisements, but only authenticated owners can create, update, or delete them.
 * Advertiser applications are also secured for admin-only access.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs.
 * - /accounts/{accountId}: Stores user account data, where accountId is the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection of transactions for each account.
 * - /tenants/{tenantId}: Stores data for integrated partner projects (tenants).
 * - /transactions/{transactionId}: Global transaction log.
 * - /advertisements/{advertisementId}: Stores advertisement campaign data.
 * - /advertiserApplications/{applicationId}: Stores applications from users to become advertisers.
 * - /api_logs/{logId}: Stores logs of API requests.
 *
 * Key Security Decisions:
 * - User listing is disallowed.
 * - Transactions are strictly owned by the account.
 * - Global transaction logs and API logs are admin-only.
 * - Advertisements are publicly readable but owner-writable.
 * - Advertiser applications are admin-only.
 *
 * Denormalization for Authorization:
 *  - The `accountId` field in the `/accounts/{accountId}/transactions/{transactionId}` subcollection is used to enforce ownership, avoiding the need for `get()` calls to the parent account.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the user is signed in.
     * @returns {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the resource.
     * @param {string} userId - The user ID to check against.
     * @returns {boolean} True if the user is the owner and the resource exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @returns {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Grants access to admin roles.
     * @path /admins/{adminId}
     * @allow (read, write) if user is an admin
     * @deny (read, write) if user is not an admin
     * @principle Enforces role-based access control for admins collection.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false; // No listing admins.
      allow create: if isAdmin();
      allow update: if false; // Admin list is managed via backend functions.
      allow delete: if false; // Admin list is managed via backend functions.
    }

    /**
     * @description Controls access to user account documents.
     * @path /accounts/{accountId}
     * @allow (create) if the user's UID matches the accountId (self-registration).
     * @allow (get, update, delete) if the user is the owner of the account.
     * @deny (create, get, update, delete) if the user is not authenticated or doesn't own the account.
     * @principle Enforces document ownership for account management.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false; // No listing user accounts.
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Controls access to transaction documents within a user's account.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) if the user is the owner of the account and the transaction's accountId matches the path.
     * @allow (get, list) if the user is the owner of the account.
     * @allow (update, delete) if false; // Transactions should not be updatable or deletable by the client.
     * @deny (create, get, list, update, delete) if the user is not authenticated or doesn't own the account.
     * @principle Enforces strict ownership for transaction management.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId) && request.resource.data.accountId == accountId;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to tenant documents.
     * @path /tenants/{tenantId}
     * @allow (read, create, update, delete) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for managing tenants.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to global transaction log.
     * @path /transactions/{transactionId}
     * @allow (read, create) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for auditing purposes.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false; // No client-side updates.
      allow delete: if false; // No client-side deletes.
    }

    /**
     * @description Controls access to advertisements.
     * @path /advertisements/{advertisementId}
     * @allow (read, list) if true (publicly readable).
     * @allow (create) if the user is authenticated and the advertiserId matches the user's UID.
     * @allow (update, delete) if the user is the owner of the advertisement.
     * @deny (create, update, delete) if the user is not authenticated or doesn't own the advertisement.
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Controls access to advertiser applications.
     * @path /advertiserApplications/{applicationId}
     * @allow (read, create, update, delete) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for managing advertiser applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to API logs.
     * @path /api_logs/{logId}
     * @allow (read, create) if the user is an admin.
     * @deny (read, create, update, delete) if the user is not an admin.
     * @principle Enforces admin-only access for auditing and monitoring API usage.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false; // No client-side updates.
      allow delete: if false; // No client-side deletes.
    }
  }
}