/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset employs a hybrid security model, balancing public read access for certain data (e.g., leaderboards) with strict, role-based or ownership-based access control for sensitive user data and administrative functions.  The rules explicitly deny any potentially dangerous operation by default and grant access only after authorization checks.
 *
 * Data Structure:
 * The Firestore database is structured with top-level collections such as `accounts`, `tenants`, `advertisements`, and `leaderboards`.  User-specific data is primarily stored under the `/accounts/{accountId}` path, with subcollections like `/accounts/{accountId}/transactions/{transactionId}` for transaction history.  Administrative data resides in `/admins/{adminId}`.
 *
 * Key Security Decisions:
 * - Public Read Access for Leaderboard: The `leaderboards/topHolders` document is publicly readable to encourage transparency and community engagement.
 * - Strict User Ownership: Read and write access to user account data and associated transactions are restricted to the account owner (i.e., the user with the matching UID).
 * - Admin Role Management: Administrative privileges are managed through the `/admins/{adminId}` collection. Only authenticated users listed in this collection are granted elevated permissions, such as approving advertiser applications or viewing global transaction logs.
 * - Tenant Isolation: Access to tenant-specific data and API logs is restricted based on API key validation.  The detailed implementation of API key validation is not covered in these rules but is assumed to be handled securely in the backend.
 * - No User Listing: Listing all users is disallowed for privacy reasons.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the request is made by an authenticated user.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Requires user to be signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces user ownership.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Checks if the authenticated user's UID matches the provided userId and the resource exists.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Enforces user ownership and resource existence for destructive operations.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the authenticated user is an admin.
     * @path N/A (Helper Function)
     * @allow N/A (Helper Function)
     * @deny N/A (Helper Function)
     * @principle Checks for admin privileges based on the /admins collection.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    /**
     * @description Defines the structure and access control for the /admins collection.
     * @path /admins/{adminId}
     * @allow (create) If the authenticated user's UID matches the document ID, allowing self-creation of admin document.
     * @allow (get, list, update, delete) If the authenticated user is an admin.
     * @deny (create) If the authenticated user's UID does not match the document ID.
     * @deny (get, list, update, delete) If the authenticated user is not an admin.
     * @principle Enforces role-based access control for admin management.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isOwner(adminId);
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines the structure and access control for the /accounts collection.
     * @path /accounts/{accountId}
     * @allow (create) If the authenticated user's UID matches the document ID, allowing self-creation of account document.
     * @allow (get, update, delete) If the authenticated user's UID matches the document ID, granting owner-only access.
     * @deny (create) If the authenticated user's UID does not match the document ID.
     * @deny (get, update, delete) If the authenticated user's UID does not match the document ID.
     * @principle Enforces strict user ownership for account data.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && resource.data.uid == request.resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Defines the structure and access control for the /accounts/{accountId}/transactions/{transactionId} subcollection.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list, create, update, delete) If the authenticated user's UID matches the parent account's ID, granting owner-only access to transactions.
     * @deny (get, list, create, update, delete) If the authenticated user's UID does not match the parent account's ID.
     * @principle Enforces strict user ownership for transaction data within an account.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Defines the structure and access control for the /tenants collection.
     * @path /tenants/{tenantId}
     * @allow (get, list) If the authenticated user is an admin.
     * @allow (create, update, delete) If the authenticated user is an admin.
     * @deny (get, list) If the authenticated user is not an admin.
     * @deny (create, update, delete) If the authenticated user is not an admin.
     * @principle Restricts access to tenant management to administrators only.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines the structure and access control for the /transactions collection.
     * @path /transactions/{transactionId}
     * @allow (get, list) If the authenticated user is an admin.
     * @allow (create) If the authenticated user is an admin.
     * @deny (get, list) If the authenticated user is not an admin.
     * @deny (create) If the authenticated user is not an admin.
     * @allow update, delete: if false; // Updates and deletes of transactions are never allowed.
     * @principle Restricts access to global transaction logs to administrators only.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines the structure and access control for the /advertisements collection.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) If true.
     * @allow (create) If the authenticated user's UID matches the advertisement's advertiserId.
     * @allow (update, delete) If the authenticated user's UID matches the advertisement's advertiserId and the document exists.
     * @deny (create) If the authenticated user's UID does not match the advertisement's advertiserId.
     * @deny (update, delete) If the authenticated user's UID does not match the advertisement's advertiserId.
     * @principle Allows public read access but restricts write access to the advertisement owner.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Defines the structure and access control for the /advertiserApplications collection.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) If the authenticated user's UID matches the application's userId.
     * @allow (get, list, update, delete) If the authenticated user is an admin.
     * @deny (create) If the authenticated user's UID does not match the application's userId.
     * @deny (get, list, update, delete) If the authenticated user is not an admin.
     * @principle Allows users to submit applications, but restricts management to admins.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Defines the structure and access control for the /api_logs collection.
     * @path /api_logs/{logId}
     * @allow (get, list) If the authenticated user is an admin.
     * @allow (create) If the authenticated user is an admin.
     * @deny (get, list) If the authenticated user is not an admin.
     * @deny (create) If the authenticated user is not an admin.
     * @allow update, delete: if false; // Updates and deletes of logs are never allowed.
     * @principle Restricts access to API logs to administrators only.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Defines the structure and access control for the /leaderboards/topHolders document.
     * @path /leaderboards/topHolders
     * @allow (get, list) If true, granting public read access.
     * @deny (create, update, delete) Always denies create, update, and delete operations.
     * @principle Allows public read access for the leaderboard while preventing unauthorized modifications.
     */
    match /leaderboards/{leaderboardId} {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}