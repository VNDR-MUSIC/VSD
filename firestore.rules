/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a user-ownership model for most data, with specific exceptions for public data.
 *
 * Data Structure:
 * - `/admins/{adminId}`: Stores admin UIDs.
 * - `/accounts/{accountId}`: Stores user account data, with subcollections for transactions.
 * - `/tenants/{tenantId}`: Stores data for integrated partner projects.
 * - `/transactions/{transactionId}`: Global log of all transactions.
 * - `/advertisements/{advertisementId}`: Stores advertisement campaigns.
 * - `/advertiserApplications/{applicationId}`: Stores applications from users wishing to become advertisers.
 * - `/api_logs/{logId}`: Logs all incoming API requests.
 * - `/leaderboards/topHolders`: Stores a pre-computed list of top token holders (publicly readable).
 *
 * Key Security Decisions:
 * - User accounts and related transactions are strictly owned by the user.
 * - Listing of all users is disallowed.
 * - Global transaction logs are secured for admin-only access.
 * - Leaderboard data is publicly readable.
 * - API logs and tenants are secured for admin access.
 * - Flexible Data Shapes: The rules do not enforce strict schema validation beyond ownership and relational integrity checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to the list of admin UIDs.
     * @path /admins/{adminId}
     * @allow (get, list) if request.auth.uid is an admin.
     * @allow (create, update, delete) if request.auth.uid is an admin.
     * @deny (get, list) if request.auth.uid is not an admin.
     * @deny (create, update, delete) if request.auth.uid is not an admin.
     * @principle Enforces role-based access control.
     */
    match /admins/{adminId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to individual user accounts.
     * @path /accounts/{accountId}
     * @allow get: if isOwner(accountId);
     * @allow list: if false;
     * @allow create: if request.auth.uid == accountId;
     * @allow update: if isExistingOwner(accountId) && request.auth.uid == resource.data.uid;
     * @allow delete: if isExistingOwner(accountId);
     * @deny create: if request.auth.uid != request.resource.data.uid;
     * @deny update: if request.resource.data.uid != resource.data.uid;
     * @principle Enforces document ownership for reads and writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if request.auth.uid == accountId && request.resource.data.uid == request.auth.uid;
      allow update: if isOwner(accountId);
      allow delete: if isOwner(accountId);
    }

    /**
     * @description Controls access to a user's transaction history.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow get, list: if isOwner(accountId);
     * @allow create: if isOwner(accountId);
     * @allow update: if isExistingOwner(accountId);
     * @allow delete: if isExistingOwner(accountId);
     * @deny create: if request.auth.uid != accountId;
     * @principle Enforces document ownership for writes and reads.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId) && request.auth.uid == accountId;
      allow update: if isOwner(accountId);
      allow delete: if isOwner(accountId);
    }

    /**
     * @description Controls access to tenant data. Only admins can read or write tenant information.
     * @path /tenants/{tenantId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces admin-only access to tenant data.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the global transaction log. Only admins can access this data.
     * @path /transactions/{transactionId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces admin-only access to global transaction logs.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to advertisement campaigns.
     * @path /advertisements/{advertisementId}
     * @allow get, list: if true;
     * @allow create: if request.auth.uid == request.resource.data.advertiserId;
     * @allow update: if isExistingOwner(resource.data.advertiserId) && request.auth.uid == resource.data.advertiserId;
     * @allow delete: if isExistingOwner(resource.data.advertiserId) && request.auth.uid == resource.data.advertiserId;
     * @principle Allows public read access but restricts writes to the owner.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if request.resource.data.advertiserId == request.auth.uid;
      allow update: if request.resource.data.advertiserId == request.auth.uid;
      allow delete: if request.resource.data.advertiserId == request.auth.uid;
    }

    /**
     * @description Controls access to advertiser applications.
     * @path /advertiserApplications/{applicationId}
     * @allow get, list: if isAdmin();
     * @allow create: if request.auth.uid == request.resource.data.userId;
     * @allow update: if isAdmin() || (isExistingOwner(resource.data.userId) && request.auth.uid == resource.data.userId);
     * @allow delete: if isAdmin();
     * @principle Restricts access to admins, but allows users to create their own applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin() || (request.resource.data.userId == request.auth.uid);
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to API access logs. Only admins can read or write these logs.
     * @path /api_logs/{logId}
     * @allow get, list: if isAdmin();
     * @allow create, update, delete: if isAdmin();
     * @deny get, list: if !isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Enforces admin-only access to API logs.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Controls access to the leaderboard data.
     * @path /leaderboards/topHolders
     * @allow get, list: if true;
     * @allow create, update, delete: if isAdmin();
     * @deny create, update, delete: if !isAdmin();
     * @principle Allows public read access but restricts writes to admins.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if true;
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(accountId) {
    return request.auth.uid == accountId;
  }

    function isExistingOwner(accountId) {
        return isOwner(accountId) && exists(/databases/$(database)/documents/accounts/$(accountId));
    }

  // Placeholder for Admin Role.  Implement with a separate mechanism (e.g., custom claims).
  function isAdmin() {
    return request.auth.token.admin == true;
  }
}