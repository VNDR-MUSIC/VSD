/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for most data, with specific exceptions for public data and administrative overrides.
 *
 * Data Structure:
 * - /accounts/{accountId}: User account data, owned by the user with the matching UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Transaction history for a specific account, owned by the account.
 * - /admins/{adminId}: List of administrator UIDs, used for granting elevated privileges.
 * - /tenants/{tenantId}: Partner tenant data, likely managed by administrators.
 * - /transactions/{transactionId}: A global transaction log, likely restricted to admin access.
 * - /advertisements/{advertisementId}: Advertisements created by advertisers. Advertiser owns their advertisements.
 * - /advertiserApplications/{applicationId}: Applications to become advertisers, owned by the user who submitted the application.
 * - /api_logs/{logId}: API access logs, likely restricted to admin access.
 * - /leaderboards/topHolders: Publicly readable leaderboard data.
 *
 * Key Security Decisions:
 * - User ownership is enforced for accounts, transactions, advertisements and advertiser applications.
 * - Administrator privileges are granted based on presence in the /admins collection.
 * - The /leaderboards/topHolders document is publicly readable.
 * - Data validation is limited to authorization-critical fields during the prototyping phase.
 * - Data listing is generally allowed only for the owner of a user-scoped subcollection.
 *
 * Denormalization for Authorization:
 * - The rules rely on the `request.auth.uid` to verify user identity and ownership.
 * - Administrator status is checked by verifying the presence of the `request.auth.uid` in the `/admins` collection.
 *
 * Structural Segregation:
 * - Public data (e.g., /leaderboards/topHolders) is stored in a separate location from private user data.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to be created, read, updated and deleted by admins only.
     * @path /admins/{adminId}
     * @allow (create) If the user is an admin and the adminId matches their uid.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access to the /admins collection.
     */
    match /admins/{adminId} {
      allow get: if true;
      allow list: if false;
      allow create: if isAdmin();
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows users to read and write their own account data.
     * @path /accounts/{accountId}
     * @allow (create) If the accountId matches the user's UID.
     * @allow (update) If the accountId matches the user's UID.
     * @deny (create) If the accountId does not match the user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      allow get: if isOwner(accountId);
      allow list: if false;
      allow create: if isOwner(accountId) && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Allows users to read and write their own transaction data.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) If the accountId matches the user's UID.
     * @deny (create) If the accountId does not match the user's UID.
     * @principle Enforces document ownership for writes in subcollections.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isOwner(accountId);
      allow list: if isOwner(accountId);
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Allows admins to read, create, update and delete tenant data.
     * @path /tenants/{tenantId}
     * @allow (create) If the user is an admin.
     * @deny (create) If the user is not an admin.
     * @principle Enforces admin-only access to the /tenants collection.
     */
    match /tenants/{tenantId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

     /**
      * @description Restricts access to the global transaction log to admins only.
      * @path /transactions/{transactionId}
      * @allow (read) If the user is an admin.
      * @deny (read) If the user is not an admin.
      * @principle Restricts access to sensitive data to authorized personnel.
      */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows advertisers to create, read, update and delete their own advertisements.
     * @path /advertisements/{advertisementId}
     * @allow (create) If the advertiserId matches the user's UID.
     * @deny (create) If the advertiserId does not match the user's UID.
     * @principle Enforces document ownership for writes.
     */
    match /advertisements/{advertisementId} {
      allow get: if isSignedIn();
      allow list: if isSignedIn();
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Allows users to create advertiser applications, and admins to manage them.
     * @path /advertiserApplications/{applicationId}
     * @allow (create) If the userId matches the user's UID.
     * @deny (create) If the userId does not match the user's UID.
     * @principle Enforces document ownership for writes and admin management.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isSignedIn() || isAdmin();
      allow list: if isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to the API logs to admins only.
     * @path /api_logs/{logId}
     * @allow (read) If the user is an admin.
     * @deny (read) If the user is not an admin.
     * @principle Restricts access to sensitive data to authorized personnel.
     */
    match /api_logs/{logId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows anyone to read the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (read) If true.
     * @deny (write) Always.
     * @principle Allows public read access to non-sensitive data.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // --- Helper functions ---

    /**
     * @description Checks if the user is signed in.
     * @return True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the user is the owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Checks if the user is the existing owner of the document.
     * @param {string} userId The user ID to check against.
     * @return True if the user is the owner and the document exists, false otherwise.
     */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the user is an admin.
     * @return True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }
  }
}