/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a role-based access control model with user-ownership where applicable.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores user account data.  The `accountId` MUST match the user's Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection for user-specific transactions.
 * - /admins/{adminId}: Stores a list of admin UIDs.
 * - /tenants/{tenantId}: Stores tenant information.
 * - /transactions/{transactionId}: A global transaction log.
 * - /advertisements/{advertisementId}: Stores advertisement data.  The `advertisementId` is a unique ID.
 * - /advertiserApplications/{applicationId}: Stores applications to become advertisers.
 * - /api_logs/{logId}: Stores logs of API access.
 * - /leaderboards/topHolders: Stores leaderboard data.
 *
 * Key Security Decisions:
 * - Users can only read/write their own account data and associated transactions.
 * - Only admins can manage tenants, view all transactions, and approve advertiser applications.
 * - Public read access is granted to the /leaderboards/topHolders document.
 * - Data validation is relaxed in this prototyping phase, focusing on authorization.
 *
 * Denormalization for Authorization:
 * - User roles are stored directly within the /accounts/{accountId} document in the `roles` array. This enables efficient role-based access control without additional reads.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to the list of administrator UIDs.
     * @path /admins/{adminId}
     * @allow (read, write) if request.auth.uid is an admin (checked via `isAdmin()`).
     * @deny (read, write) if request.auth.uid is not an admin.
     * @principle Enforces role-based access control, restricting access to admin users only.
     */
    match /admins/{adminId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Secure access to user account documents.
     * @path /accounts/{accountId}
     * @allow (create) if the authenticated user's UID matches the `accountId`.
     * @allow (get, list, update, delete) if the authenticated user's UID matches the `accountId`.
     * @deny (create, get, list, update, delete) if the authenticated user's UID does not match the `accountId`.
     * @principle Enforces document ownership, restricting access to a user's own account data.
     */
    match /accounts/{accountId} {
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow get, list, update, delete: if isOwner(accountId);
    }

    /**
     * @description Secure access to user-specific transaction subcollections.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list) if the authenticated user's UID matches the `accountId`.
     * @allow (create) if the authenticated user's UID matches the `accountId`.
     * @allow (update, delete) if the authenticated user's UID matches the `accountId` and the document exists.
     * @deny (create, get, list, update, delete) if the authenticated user's UID does not match the `accountId`.
     * @principle Restricts access to a user's own transaction data.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list, create: if isOwner(accountId);
      allow update, delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secure access to tenant documents. Only admins can manage tenants.
     * @path /tenants/{tenantId}
     * @allow (read, write) if the authenticated user is an admin.
     * @deny (read, write) if the authenticated user is not an admin.
     * @principle Enforces role-based access control, restricting tenant management to admin users.
     */
    match /tenants/{tenantId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Secure access to the global transaction log. Only admins can view this log.
     * @path /transactions/{transactionId}
     * @allow (read, write) if the authenticated user is an admin.
     * @deny (read, write) if the authenticated user is not an admin.
     * @principle Enforces role-based access control, restricting access to the transaction log to admin users.
     */
    match /transactions/{transactionId} {
      allow read, write: if isAdmin();
    }

   /**
    * @description Secure access to advertisement documents.
    * @path /advertisements/{advertisementId}
    * @allow (get, list) to anyone.
    * @allow (create) if the `advertiserId` in the request matches the authenticated user's UID.
    * @allow (update, delete) if the `advertiserId` in the existing document matches the authenticated user's UID and the document exists.
    * @deny (create, update, delete) if the `advertiserId` does not match or the document does not exist.
    * @principle Allows public read access but restricts write access to the advertisement owner.
    */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update, delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Secure access to advertiser application documents.
     * @path /advertiserApplications/{applicationId}
     * @allow (read, write) if the authenticated user is an admin.
     * @deny (read, write) if the authenticated user is not an admin.
     * @principle Enforces role-based access control, restricting access to admin users only.
     */
    match /advertiserApplications/{applicationId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Secure access to API log documents.
     * @path /api_logs/{logId}
     * @allow (read, write) if the authenticated user is an admin.
     * @deny (read, write) if the authenticated user is not an admin.
     * @principle Enforces role-based access control, restricting access to admin users only.
     */
    match /api_logs/{logId} {
      allow read, write: if isAdmin();
    }

    /**
     * @description Public read access to the top holders leaderboard.
     * @path /leaderboards/topHolders
     * @allow (get, list) to anyone.
     * @allow (create, update, delete) if the authenticated user is an admin.
     * @deny (create, update, delete) if the authenticated user is not an admin.
     * @principle Allows public read access but restricts write access to admin users only.
     */
    match /leaderboards/topHolders {
      allow get, list: if true;
      allow create, update, delete: if isAdmin();
    }


    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
    }

    function isAdmin() {
      return isSignedIn() && (resource.data.roles.hasAny(['admin'])) || (request.auth.token.admin == true);
    }
  }
}