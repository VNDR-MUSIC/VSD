/**
 * @fileoverview Firestore Security Rules for the VSD Network application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for user-specific data
 * and employs role-based access control for administrative functions.  All
 * writes require authentication. Data validation is relaxed in prototyping mode
 * except for fields critical for authorization and relational integrity.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs.
 * - /accounts/{accountId}: Stores user account data. Account ID matches the Firebase Auth UID.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection of transactions for each account.
 * - /tenants/{tenantId}: Stores tenant (partner) data.
 * - /transactions/{transactionId}: Global transaction log (admin-only access).
 * - /advertisements/{advertisementId}: Stores advertisement data.
 * - /advertiserApplications/{applicationId}: Stores applications to become advertisers.
 * - /api_logs/{logId}: Stores logs of API requests (admin-only access).
 * - /leaderboards/topHolders: Stores leaderboard data.
 *
 * Key Security Decisions:
 * - User accounts and their transactions are strictly owned by the user.
 * - Global transaction logs and API logs are restricted to admins.
 * - Leaderboard data is publicly readable.
 * - Listing of the global `/transactions` collection is disabled except for admins.
 *
 * Denormalization for Authorization:
 * - The `accountId` field in the `Transaction` documents MUST match the UID of the parent `Account` document to allow performant security rules without using `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Checks if the current user is signed in.
     * @param {void}
     * @return {boolean} True if the user is signed in, false otherwise.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Checks if the current user is the owner of the resource.
     * @param {string} userId The user ID to compare against the request's auth UID.
     * @return {boolean} True if the user is the owner, false otherwise.
     */
    function isOwner(userId) {
      return isSignedIn() && request.auth.uid == userId;
    }

     /**
      * @description Checks if the current user is the existing owner of the resource.
      * @param {string} userId The user ID to compare against the resource's data.
      * @return {boolean} True if the user is the owner, false otherwise.
      */
    function isExistingOwner(userId) {
      return isOwner(userId) && resource != null;
    }

    /**
     * @description Checks if the current user has the 'admin' role.
     * @return {boolean} True if the user is an admin, false otherwise.
     */
    function isAdmin() {
      return isSignedIn() && request.auth.token.admin == true;
    }

    /**
     * @description Grants read and write access to admins.
     * @path /admins/{adminId}
     * @allow (get, list, create, update, delete) if the user is an admin.
     * @deny (get, list, create, update, delete) if the user is not an admin.
     * @principle Enforces role-based access control for admins.
     */
    match /admins/{adminId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to user account data.
     * @path /accounts/{accountId}
     * @allow (get, list) if true
     * @allow (create) if the user's UID matches the account ID.
     * @allow (update, delete) if the user is the owner of the account.
     * @deny (create) if the user's UID does not match the account ID.
     * @deny (update, delete) if the user is not the owner of the account.
     * @principle Enforces document ownership for writes and allows public reads.
     */
    match /accounts/{accountId} {
      allow get, list: if true;
      allow create: if isOwner(accountId);
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Grants access to user-specific transaction data.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (get, list) if the user is the owner of the account.
     * @allow (create) if the user is the owner of the account and the accountId matches.
     * @allow (update, delete) if the user is the existing owner of the account.
     * @deny (create) if the accountId does not match.
     * @deny (update, delete) if the user is not the owner of the account.
     * @principle Enforces document ownership and validates the account ID on create.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get, list: if isOwner(accountId);
      allow create: if isOwner(accountId) && request.resource.data.accountId == accountId;
      allow update: if isExistingOwner(accountId);
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Grants access to tenant data.
     * @path /tenants/{tenantId}
     * @allow get, list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Restricts tenant management to administrators.
     */
    match /tenants/{tenantId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Restricts access to the global transaction log to admins.
     * @path /transactions/{transactionId}
     * @allow get: if isAdmin();
     * @allow list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Enforces role-based access control, restricting access to sensitive data.
     */
    match /transactions/{transactionId} {
      allow get: if isAdmin();
      allow list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Grants access to advertisement data.
     * @path /advertisements/{advertisementId}
     * @allow get, list: if true;
     * @allow create: if isSignedIn(); // Any signed-in user can create an ad
     * @allow update: if request.auth.uid == resource.data.advertiserId && resource != null;
     * @allow delete: if request.auth.uid == resource.data.advertiserId && resource != null;
     * @principle Allows public reads, owner-only writes.
     */
    match /advertisements/{advertisementId} {
      allow get, list: if true;
      allow create: if isSignedIn();
      allow update: if isExistingOwner(resource.data.advertiserId);
      allow delete: if isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Grants access to advertiser application data.
     * @path /advertiserApplications/{applicationId}
     * @allow get, list: if isAdmin() || request.auth.uid == resource.data.userId;
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isAdmin(); // Only admins can approve/reject applications
     * @allow delete: if false;
     * @principle Allows admins to manage applications and users to view their own application.
     */
    match /advertiserApplications/{applicationId} {
      allow get, list: if isAdmin() || isOwner(resource.data.userId);
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isAdmin();
      allow delete: if false;
    }

    /**
     * @description Restricts access to API logs to admins.
     * @path /api_logs/{logId}
     * @allow get, list: if isAdmin();
     * @allow create: if isAdmin();
     * @allow update: if isAdmin();
     * @allow delete: if isAdmin();
     * @principle Enforces role-based access control, restricting access to sensitive data.
     */
    match /api_logs/{logId} {
      allow get, list: if isAdmin();
      allow create: if isAdmin();
      allow update: if isAdmin();
      allow delete: if isAdmin();
    }

    /**
     * @description Allows public read access to leaderboard data.
     * @path /leaderboards/topHolders
     * @allow get, list: if true;
     * @allow create, update, delete: if false;
     * @principle Allows public reads, disables writes.
     */
    match /leaderboards/topHolders {
      allow get, list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }
  }
}