/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for account data,
 * while allowing public read access to tenant information.  Administrative
 * access to the global transaction log is also supported.
 *
 * Data Structure:
 * - /accounts/{accountId}: Stores individual user account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Stores transactions for a specific user account.
 * - /tenants/{tenantId}: Stores tenant project data.
 * - /transactions/{transactionId}: Stores a global log of all transactions.
 *
 * Key Security Decisions:
 * - User accounts and their transactions are strictly controlled by the account owner.
 * - Tenant information is publicly readable to facilitate integration.
 * - Global transaction logs are secured for potential admin-only access.
 *
 * Denormalization for Authorization:
 * - The `accountId` is used both as the document ID and as a field within the
 *   account and transaction documents to ensure consistency and enable efficient
 *   authorization checks.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure user accounts and enforce ownership.
     * @path /accounts/{accountId}
     * @allow (create) Authenticated user can create their own account if the accountId matches their UID.
     * @allow (get, list, update, delete) Only the account owner can read, update, or delete their account.
     * @deny (create) Reject creation if the accountId does not match the user's UID.
     * @deny (update, delete) Reject if the account does not exist.
     * @principle Enforces document ownership for writes.
     */
    match /accounts/{accountId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(accountId) {
        return request.auth.uid == accountId;
      }

      function isExistingOwner(accountId) {
        return isOwner(accountId) && resource != null;
      }
      
      allow get: if isOwner(accountId);
      allow list: if false; // Prevent listing of all accounts.

      allow create: if isSignedIn() && request.resource.data.uid == accountId;
      allow update: if isExistingOwner(accountId) && request.resource.data.uid == resource.data.uid;
      allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Secure user-specific transactions subcollection.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (create) The account owner can create new transactions in their account.
     * @allow (get, list, update, delete) Only the account owner can read, update, or delete transactions.
     * @deny (create) Creation is rejected if the account ID in the transaction does not match the parent account ID.
     * @deny (update, delete) Reject if the account or transaction does not exist.
     * @principle Restricts access to a user's own data tree.
     */
    match /accounts/{accountId}/transactions/{transactionId} {

        function isSignedIn() {
            return request.auth != null;
        }

        function isOwner(accountId) {
            return request.auth.uid == accountId;
        }

        function isExistingOwner(accountId) {
            return isOwner(accountId) && resource != null;
        }

        allow get: if isOwner(accountId);
        allow list: if isOwner(accountId);

        allow create: if isSignedIn() && request.resource.data.accountId == accountId;
        allow update: if isExistingOwner(accountId) && request.resource.data.accountId == resource.data.accountId;
        allow delete: if isExistingOwner(accountId);
    }

    /**
     * @description Allow public read access to tenant data, but restrict writes.
     * @path /tenants/{tenantId}
     * @allow (get, list) Public read access is allowed for tenants.
     * @allow (create, update, delete) Only authenticated users can create, update, or delete tenants.
     * @principle Public Read with Owner-Only Writes
     */
    match /tenants/{tenantId} {
        // CRITICAL: Cannot implement owner-only writes. The 'Tenant' entity is missing an 'ownerId' or 'authorId' field.
        allow get, list: if true;
        allow create, update, delete: if false; // TODO: Add owner validation once the schema is updated with an ownership field.
    }

    /**
     * @description Secure the global transactions log for potential admin access.
     * @path /transactions/{transactionId}
     * @allow (get, list, create, update, delete) No access granted.
     * @principle Restricts all access to this collection by default.
     */
    match /transactions/{transactionId} {
        allow get, list, create, update, delete: if false;
    }
  }
}