/**
 * @fileoverview Firestore Security Rules for VSD Network.
 *
 * Core Philosophy:
 * This ruleset prioritizes a secure-by-default posture, focusing on user-ownership for personal data
 * and role-based access control for administrative functions. It avoids overly strict schema validation
 * to allow for rapid prototyping and iteration.
 *
 * Data Structure:
 * - /admins/{adminId}: Stores admin user IDs. Only admins can manage this collection.
 * - /accounts/{accountId}: Stores user account information. Users can only access their own account data.
 * - /accounts/{accountId}/transactions/{transactionId}: Subcollection of transactions for a specific account.
 *   Users can only access transactions associated with their account.
 * - /tenants/{tenantId}: Stores tenant (partner project) information. Access is restricted.
 * - /transactions/{transactionId}: Global transaction log. Access is restricted to admins.
 * - /advertisements/{advertisementId}: Stores advertisement campaigns. Owner has write access, all users can read.
 * - /advertiserApplications/{applicationId}: Stores applications to become an advertiser.
 * - /api_logs/{logId}: Logs of API access for monitoring. Access restricted.
 * - /leaderboards/topHolders: Publicly readable leaderboard data.
 *
 * Key Security Decisions:
 * - No user listing: `list` operations are generally denied unless explicitly required and secured.
 * - Admin role: A simple `isAdmin()` function checks for membership in the `/admins` collection.
 * - Public leaderboards: The `/leaderboards/topHolders` document is publicly readable.
 *
 * Denormalization for Authorization:
 * - Advertiser owns Advertisement
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Allows admins to manage the list of admin UIDs.
     * @path /admins/{adminId}
     * @allow (read, write) if isAdmin() - Only admins can read and write.
     * @deny (read, write) if !isAdmin() - Non-admins cannot read or write.
     * @principle Enforces role-based access control for managing administrator privileges.
     */
    match /admins/{adminId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Allows a user to read and write their own account data.
     * @path /accounts/{accountId}
     * @allow (get, update, delete) if isOwner(accountId) - Users can only access their own account.
     * @allow (create) if request.auth.uid == accountId - Users can create their own account.
     * @deny (get, update, delete) if !isOwner(accountId) - Users cannot access other accounts.
     * @principle Enforces document ownership for account data.
     */
    match /accounts/{accountId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == accountId;
      allow update: if isSignedIn() && isOwner(accountId);
      allow delete: if isSignedIn() && isOwner(accountId);
    }

    /**
     * @description Allows a user to read and write their own transaction data.
     * @path /accounts/{accountId}/transactions/{transactionId}
     * @allow (read, write) if isOwner(accountId) - Users can only access transactions for their account.
     * @deny (read, write) if !isOwner(accountId) - Users cannot access transactions for other accounts.
     * @principle Enforces document ownership for transaction data within an account.
     */
    match /accounts/{accountId}/transactions/{transactionId} {
      allow get: if isSignedIn() && isOwner(accountId);
      allow list: if isSignedIn() && isOwner(accountId);
      allow create: if isSignedIn() && isOwner(accountId);
      allow update: if isSignedIn() && isOwner(accountId);
      allow delete: if isSignedIn() && isOwner(accountId);
    }

    /**
     * @description Restricts access to tenant data.
     * @path /tenants/{tenantId}
     * @allow (read, write) if isAdmin() - Only admins can manage tenant data.
     * @deny (read, write) if !isAdmin() - Non-admins cannot access tenant data.
     * @principle Enforces role-based access control for managing tenants.
     */
    match /tenants/{tenantId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Restricts access to the global transaction log.
     * @path /transactions/{transactionId}
     * @allow (read, write) if isAdmin() - Only admins can access the transaction log.
     * @deny (read, write) if !isAdmin() - Non-admins cannot access the transaction log.
     * @principle Enforces role-based access control for accessing the global transaction log.
     */
    match /transactions/{transactionId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows any user to read advertisements, but only the owner can modify them.
     * @path /advertisements/{advertisementId}
     * @allow (get, list) if true - Advertisements are publicly readable.
     * @allow (create) if request.resource.data.advertiserId == request.auth.uid - Only the owner can create advertisements.
     * @allow (update, delete) if isExistingOwner(resource.data.advertiserId) - Only the owner can update/delete advertisements.
     * @deny (create) if request.resource.data.advertiserId != request.auth.uid - Disallows creating ads for other users.
     * @deny (update, delete) if !isExistingOwner(resource.data.advertiserId) - Disallows non-owners from updating/deleting.
     * @principle Allows public read access with owner-only writes.
     */
    match /advertisements/{advertisementId} {
      allow get: if true;
      allow list: if true;
      allow create: if isSignedIn() && request.resource.data.advertiserId == request.auth.uid;
      allow update: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
      allow delete: if isSignedIn() && isExistingOwner(resource.data.advertiserId);
    }

    /**
     * @description Restricts access to advertiser applications.
     * @path /advertiserApplications/{applicationId}
     * @allow list: if isSignedIn() && isAdmin();
     * @allow get: if isSignedIn() && isAdmin();
     * @allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
     * @allow update: if isSignedIn() && isAdmin();
     * @allow delete: if false;
     * @principle Only admins can manage advertiser applications.
     */
    match /advertiserApplications/{applicationId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if isSignedIn() && isAdmin();
      allow create: if isSignedIn() && request.resource.data.userId == request.auth.uid;
      allow update: if isSignedIn() && isAdmin();
      allow delete: if false;
    }

    /**
     * @description Restricts access to API logs.
     * @path /api_logs/{logId}
     * @allow (read, write) if isAdmin() - Only admins can access API logs.
     * @deny (read, write) if !isAdmin() - Non-admins cannot access API logs.
     * @principle Enforces role-based access control for accessing API logs.
     */
    match /api_logs/{logId} {
      allow get: if isSignedIn() && isAdmin();
      allow list: if false;
      allow create: if isSignedIn() && isAdmin();
      allow update: if isSignedIn() && isAdmin();
      allow delete: if isSignedIn() && isAdmin();
    }

    /**
     * @description Allows public read access to the leaderboard.
     * @path /leaderboards/topHolders
     * @allow (get, list) if true - Leaderboard is publicly readable.
     * @deny (create, update, delete) - No one can write to the leaderboard.
     * @principle Allows public read access with no write access.
     */
    match /leaderboards/topHolders {
      allow get: if true;
      allow list: if true;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    // ---- Helper functions ----

    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isAdmin() {
        return exists(/databases/$(database)/documents/admins/$(request.auth.uid));
    }

    function isExistingOwner(ownerId) {
        return isOwner(ownerId) && resource != null;
    }
  }
}